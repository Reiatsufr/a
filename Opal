-- Load external scripts
loadstring(game:HttpGet("https://raw.githubusercontent.com/incrimination/fvgfwe/main/bbb"))()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Reiatsufr/reiatsu/main/main.lua"))()


-- << Load Library >>
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Reiatsufr/reiatsu/main/Captain%20Hook%20paid", true))()
local ReplicatedStorage = game:GetService("ReplicatedStorage")
-- Check if Library loaded successfully
if not Library then
    error("Failed to load Library.")
end

local Tabs = {
    Combat = Library:addTab("COMBAT", "http://www.roblox.com/asset/?id=15178561786"),
    Visuals = Library:addTab("VISUALS", "http://www.roblox.com/asset/?id=16855947732"),
    Miscellaneous = Library:addTab("MISC", "http://www.roblox.com/asset/?id=16856644248"),
    Local = Library:addTab("LOCAL", "http://www.roblox.com/asset/?id=15178519346"),
    Settings = Library:addTab("SETTINGS", "http://www.roblox.com/asset/?id=16856650102")
}

-- Function to handle player character respawning
local function onCharacterAdded(character, applyTrailSettings, ToggleVoldemortTrail, applyHeadless)
    -- Re-apply all settings when the character respawns
    applyTrailSettings()
    ToggleVoldemortTrail(Library.flags["VoldemortTrailEnabled"])
    applyHeadless()
end

local Menu_Settings = Tabs.Settings:createGroup('left', 'Menu');local Join_Notifications

do --// Menu
    Menu_Settings:addToggle({text = "Menu Bind",default = true,flag = "MenuBind",callback = function(state) end})
        :addKeybind({text = "Menu Bind",gui = false,type = "toggle",key = Enum.KeyCode.End,flag = "MenuKeybind",callback = function(state) Library.keybind = state end})
    Menu_Settings:addToggle({text = "Watermark",default = true,flag = "Watermark",callback = function(state) Library.Watermark:SetVisible(state) end})
        :addColorpicker({text = "watermark color",ontop = true,flag = "Watermark_Accent",color = Color3.fromRGB(115, 100, 215),callback = function(state) Library.Watermark:Color(state) end})
    Menu_Settings:addToggle({text = "Keybinds",default = true,flag = "Keybinds",callback = function(state) Library:visualize(state) end})
        :addColorpicker({text = "keybinds color",ontop = true,flag = "Keybinds_Accent",color = Color3.fromRGB(115, 100, 215),callback = function(state) Library:keybind_color(state) end})
    Menu_Settings:addToggle({text = "Join Notifications",default = true,flag = "Notifications",callback = function(state) Join_Notifications = state end})
        :addColorpicker({text = "notifications color",ontop = true,flag = "Notifications_Accent",color = Color3.fromRGB(115, 100, 215),callback = function(state) end})
    Menu_Settings:addList({text = "Position:",multiselect = false,values = {"Top Left", "Top Right", "Top Middle", "Bottom Left", "Bottom Right"},flag = "Notifications_Position"})
    Menu_Settings:addSlider({text = "Time:", min = 0, max = 30, suffix = "s", float = 1, default = 15, flag = "Notifications_Time",callback = function(state) end})
end

local createconfigs = Tabs.Settings:createGroup('center', 'Configs')

do --// Config
    createconfigs:addTextbox({text = "Name:",flag = "config_name"})
    createconfigs:addButton({text = "Create",callback = Library.createConfig})
    createconfigs:addConfigbox({flag = 'config_box',values = {}})
    createconfigs:addButton({text = "Load",callback = Library.loadConfig})
    createconfigs:addButton({text = "Overwrite",callback = Library.saveConfig})
    createconfigs:addButton({text = "Delete",callback = Library.deleteConfig})
end

-- Headless Option in Local Player Settings
local Local_Settings = Tabs.Local:createGroup('center', 'Local Player')

do
    local headlessEnabled = false

    local function applyHeadless()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        if character then
            local head = character:FindFirstChild("Head")
            local face = head and head:FindFirstChild("face")

            if headlessEnabled then
                -- Remove head and face
                if head then
                    head.Transparency = 1
                end
                if face then
                    face:Destroy()
                end
            end
        end
    end

    local function restoreHeadAndFace()
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        if character then
            local head = character:FindFirstChild("Head")

            if head then
                head.Transparency = 0
                if not head:FindFirstChild("face") then
                    local newFace = Instance.new("Decal")
                    newFace.Name = "face"
                    newFace.Texture = "rbxasset://textures/face.png"
                    newFace.Parent = head
                end
            end
        end
    end

    -- Toggle for Headless
    Local_Settings:addToggle({
        text = "Headless Enabled",
        default = false,
        flag = "HeadlessEnabled",
        callback = function(state)
            headlessEnabled = state
            if headlessEnabled then
                applyHeadless()
            else
                restoreHeadAndFace()
            end
        end
    })

    -- Apply or restore headless effect when character respawns based on toggle state
    game.Players.LocalPlayer.CharacterAdded:Connect(function()
        if headlessEnabled then
            applyHeadless()
        else
            restoreHeadAndFace()
        end
    end)
end

-- Visuals Settings for Trail
local Trail_Settings = Tabs.Visuals:createGroup('right', 'Trail')

do
    local trailEnabled = false
    local trailLifetime = 1
    local trailColor = Color3.fromRGB(255, 0, 0)
    local trail -- Declare the trail variable here

    local function applyTrailSettings()
        local player = game:GetService("Players").LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Ensure the character and HumanoidRootPart are available
        if character and character:FindFirstChild("HumanoidRootPart") then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            -- Remove any existing trails to avoid duplication
            if trail then
                trail:Destroy()
            end

            if trailEnabled then
                -- Create an Attachment at the HumanoidRootPart
                local attachment0 = Instance.new("Attachment")
                attachment0.Parent = humanoidRootPart

                -- Create an additional attachment slightly offset
                local attachment1 = Instance.new("Attachment")
                attachment1.Position = Vector3.new(0, -2, 0) -- Adjust the offset as needed
                attachment1.Parent = humanoidRootPart

                -- Create the Trail object
                trail = Instance.new("Trail")
                trail.Attachment0 = attachment0
                trail.Attachment1 = attachment1
                trail.Color = ColorSequence.new(trailColor) -- Use the selected color
                trail.Lifetime = trailLifetime -- Use the selected lifetime
                trail.Transparency = NumberSequence.new(0, 0.5) -- Fades from fully opaque to semi-transparent
                trail.WidthScale = NumberSequence.new(0.2, 0.2) -- Thinner, consistent width
                trail.LightEmission = 1 -- Ensures the trail is bright and glowing
                trail.TextureMode = Enum.TextureMode.Stretch -- Stretch the texture to make it continuous
                trail.Texture = "rbxassetid://2454009026" -- Use a rounded texture

                -- Parent the trail to the HumanoidRootPart
                trail.Parent = humanoidRootPart
            end
        end
    end

    -- Toggle for Trail
    Trail_Settings:addToggle({
        text = "Trail Enabled",
        default = false,
        flag = "TrailEnabled",
        callback = function(state)
            trailEnabled = state
            applyTrailSettings()
        end
    })

    -- Colorpicker for Trail Color
    Trail_Settings:addColorpicker({
        text = "Color",
        default = Color3.fromRGB(255, 0, 0),
        flag = "TrailColor",
        callback = function(state)
            trailColor = state
            applyTrailSettings()
        end
    })

    -- Slider for Trail Lifetime
    Trail_Settings:addSlider({
        text = "Trail Lifetime",
        min = 0.1,
        max = 5,
        float = 0.1,
        default = 1,
        suffix = "s",
        flag = "TrailLifetime",
        callback = function(state)
            trailLifetime = state
            applyTrailSettings()
        end
    })

    -- Re-apply the trail on respawn
    game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
        onCharacterAdded(character, applyTrailSettings, function() end, applyHeadless)
    end)
end



-- ForceField Settings
local ForceField_Settings = Tabs.Visuals:createGroup('center', 'Local Player')

do
    local Settings = {
        Visuals = {
            Character_Chams = {
                Enabled = false, -- Toggle the effect (default off)
                Material = Enum.Material.ForceField, -- ForceField material
                Color = Color3.fromRGB(255, 0, 0), -- Default color (can be changed)
            },
        },
    }

    -- Function to apply or remove ForceField material from the character
    local function ApplyForceFieldToCharacter()
        local Character = game.Players.LocalPlayer.Character
        if Character then
            for _, part in pairs(Character:GetDescendants()) do
                if part:IsA("BasePart") then
                    if Settings.Visuals.Character_Chams.Enabled then
                        part.Material = Settings.Visuals.Character_Chams.Material
                        part.Color = Settings.Visuals.Character_Chams.Color
                    else
                        part.Material = Enum.Material.Plastic -- Revert to default material when disabled
                        part.Color = Color3.new(1, 1, 1) -- Revert to default color when disabled
                    end
                end
            end
        end
    end

    -- Toggle for ForceField Effect
    ForceField_Settings:addToggle({
        text = "ForceField Enabled",
        default = Settings.Visuals.Character_Chams.Enabled,
        flag = "ForceFieldEnabled",
        callback = function(state)
            Settings.Visuals.Character_Chams.Enabled = state
            ApplyForceFieldToCharacter()
        end
    })

    -- Colorpicker for ForceField Color
    ForceField_Settings:addColorpicker({
        text = "Color",
        default = Settings.Visuals.Character_Chams.Color,
        flag = "ForceFieldColor",
        callback = function(state)
            Settings.Visuals.Character_Chams.Color = state
            ApplyForceFieldToCharacter()
        end
    })

    -- Apply the ForceField effect when the character spawns
    game.Players.LocalPlayer.CharacterAdded:Connect(function()
        ApplyForceFieldToCharacter()
    end)

    -- Call the function to apply the ForceField material immediately
    ApplyForceFieldToCharacter()
end

-- World Settings
local World_Settings = Tabs.Visuals:createGroup('center', 'World')

do
    -- Toggle for No Shadows
    World_Settings:addToggle({
        text = "No Shadows",
        default = false,
        flag = "NoShadows",
        callback = function(state)
            game.Lighting.GlobalShadows = not state
        end
    })

-- Store original lighting and fog settings to revert back if needed
local originalAmbient = game.Lighting.Ambient
local originalOutdoorAmbient = game.Lighting.OutdoorAmbient
local originalColorShift_Top = game.Lighting.ColorShift_Top
local originalFogColor = game.Lighting.FogColor
local originalFogStart = game.Lighting.FogStart
local originalFogEnd = game.Lighting.FogEnd

-- Function to apply or remove World Tint
local function ApplyWorldTint(state)
    if state then
        -- Apply the tint by modifying Lighting properties
        local tintColor = Library.flags["WorldTintColor"] or Color3.fromRGB(255, 0, 0)
        game.Lighting.Ambient = tintColor
        game.Lighting.OutdoorAmbient = tintColor
        game.Lighting.ColorShift_Top = tintColor
    else
        -- Revert to original lighting settings
        game.Lighting.Ambient = originalAmbient
        game.Lighting.OutdoorAmbient = originalOutdoorAmbient
        game.Lighting.ColorShift_Top = originalColorShift_Top
    end
end

-- Function to apply or remove Fog
local function ApplyFog(state)
    if state then
        -- Apply fog settings
        local fogColor = Library.flags["FogColor"] or Color3.fromRGB(255, 0, 0)
        game.Lighting.FogColor = fogColor
        game.Lighting.FogStart = 50 -- Adjust the start distance of the fog
        game.Lighting.FogEnd = 500 -- Adjust the end distance of the fog
    else
        -- Revert to original fog settings
        game.Lighting.FogColor = originalFogColor
        game.Lighting.FogStart = originalFogStart
        game.Lighting.FogEnd = originalFogEnd
    end
end

-- Toggle for World Tint
World_Settings:addToggle({
    text = "Ambient",
    default = false,
    flag = "WorldTintEnabled",
    callback = function(state)
        ApplyWorldTint(state)
    end
})

-- Colorpicker for World Tint Color
World_Settings:addColorpicker({
    text = "Ambient Color",
    default = Color3.fromRGB(255, 0, 0),
    flag = "WorldTintColor",
    callback = function(color)
        if Library.flags["WorldTintEnabled"] then
            ApplyWorldTint(true) -- Reapply tint with the new color
        end
    end
})

-- Toggle for Fog
World_Settings:addToggle({
    text = "Fog",
    default = false,
    flag = "FogEnabled",
    callback = function(state)
        ApplyFog(state)
    end
})

-- Colorpicker for Fog Color
World_Settings:addColorpicker({
    text = "Fog Color",
    default = Color3.fromRGB(255, 0, 0),
    flag = "FogColor",
    callback = function(color)
        if Library.flags["FogEnabled"] then
            ApplyFog(true) -- Reapply fog with the new color
        end
    end
})


end

local Esp_Settings = Tabs.Visuals:createGroup('left', 'Esp')

do
    -- Toggle for ESP Enabled
    Esp_Settings:addToggle({
        text = "ESP Enabled",
        default = getgenv().ESP.Main.Enabled,
        flag = "ESPEnabled",
        callback = function(state)
            getgenv().ESP.Main.Enabled = state
        end
    })

    -- Toggle for Name ESP
    Esp_Settings:addToggle({
        text = "Name ESP",
        default = getgenv().ESP.Main.Name.Enabled,
        flag = "NameESPEnabled",
        callback = function(state)
            getgenv().ESP.Main.Name.Enabled = state
        end
    })

    -- Colorpicker for Name ESP Color
    Esp_Settings:addColorpicker({
        text = "Name Color",
        default = getgenv().ESP.Main.Name.Color,
        flag = "NameESPColor",
        callback = function(state)
            getgenv().ESP.Main.Name.Color = state
        end
    })

    -- Toggle for Box ESP
    Esp_Settings:addToggle({
        text = "Box ESP",
        default = getgenv().ESP.Main.Box.Enabled,
        flag = "BoxESPEnabled",
        callback = function(state)
            getgenv().ESP.Main.Box.Enabled = state
        end
    })

    -- Colorpicker for Box ESP Color
    Esp_Settings:addColorpicker({
        text = "Box Color",
        default = getgenv().ESP.Main.Box.BoxColor,
        flag = "BoxESPColor",
        callback = function(state)
            getgenv().ESP.Main.Box.BoxColor = state
        end
    })

    -- Toggle for Box Fill
    Esp_Settings:addToggle({
        text = "Box Fill",
        default = getgenv().ESP.Main.Box.FillEnabled,
        flag = "BoxFillEnabled",
        callback = function(state)
            getgenv().ESP.Main.Box.FillEnabled = state
        end
    })

    -- Colorpicker for Box Fill Color
    Esp_Settings:addColorpicker({
        text = "Box Fill Color",
        default = getgenv().ESP.Main.Box.BoxFillColor,
        flag = "BoxFillColor",
        callback = function(state)
            getgenv().ESP.Main.Box.BoxFillColor = state
        end
    })

    -- Toggle for HealthBar ESP
    Esp_Settings:addToggle({
        text = "HealthBar ESP",
        default = getgenv().ESP.Main.HealthBar.Enabled,
        flag = "HealthBarESPEnabled",
        callback = function(state)
            getgenv().ESP.Main.HealthBar.Enabled = state
        end
    })

    -- Toggle for Showing Health Numbers
    Esp_Settings:addToggle({
        text = "Show Health Numbers",
        default = getgenv().ESP.Main.HealthBar.Number,
        flag = "HealthNumberEnabled",
        callback = function(state)
            getgenv().ESP.Main.HealthBar.Number = state
        end
    })

    -- Colorpicker for High Health Color
    Esp_Settings:addColorpicker({
        text = "High Health Color",
        default = getgenv().ESP.Main.HealthBar.HighHealthColor,
        flag = "HighHealthColor",
        callback = function(state)
            getgenv().ESP.Main.HealthBar.HighHealthColor = state
        end
    })

    -- Colorpicker for Low Health Color
    Esp_Settings:addColorpicker({
        text = "Low Health Color",
        default = getgenv().ESP.Main.HealthBar.LowHealthColor,
        flag = "LowHealthColor",
        callback = function(state)
            getgenv().ESP.Main.HealthBar.LowHealthColor = state
        end
    })

    -- Toggle for Distance ESP
    Esp_Settings:addToggle({
        text = "Distance ESP",
        default = getgenv().ESP.Main.Distance.Enabled,
        flag = "DistanceESPEnabled",
        callback = function(state)
            getgenv().ESP.Main.Distance.Enabled = state
        end
    })

    -- Colorpicker for Distance ESP Color
    Esp_Settings:addColorpicker({
        text = "Distance Color",
        default = getgenv().ESP.Main.Distance.Color,
        flag = "DistanceESPColor",
        callback = function(state)
            getgenv().ESP.Main.Distance.Color = state
        end
    })





    -- Toggle for using Display Name instead of Username
    Esp_Settings:addToggle({
        text = "Use Display Name",
        default = getgenv().ESP.Extra.UseDisplayName,
        flag = "UseDisplayName",
        callback = function(state)
            getgenv().ESP.Extra.UseDisplayName = state
        end
    })

    -- Slider for ESP Fade Out
    Esp_Settings:addSlider({
        text = "ESP Fade Out",
        min = 100,
        max = 1000,
        float = 1,
        default = getgenv().ESP.Extra.EspFadeOut,
        suffix = "ms",
        flag = "ESPFadeOut",
        callback = function(value)
            getgenv().ESP.Extra.EspFadeOut = value
        end
    })
end

local Chams_Settings = Tabs.Visuals:createGroup('center', 'Chams')

do
    local outlineEnabled = true -- Variable to control the outline state
    local chamsEnabled = false
    local chamsFillColor = Color3.fromRGB(255, 0, 0)
    local chamsOutlineColor = Color3.fromRGB(255, 255, 255)
    local excludeLocalPlayer = false -- New variable to exclude the local player

    -- Function to configure the highlight
    local function configureHighlight(highlight)
        highlight.FillColor = chamsFillColor
        highlight.OutlineColor = chamsOutlineColor
        highlight.FillTransparency = 0.5

        if outlineEnabled then
            highlight.OutlineTransparency = 0 -- Make outline visible
        else
            highlight.OutlineTransparency = 1 -- Make outline invisible
        end
    end

    -- Function to apply or remove chams from a character
    local function updateChamsForCharacter(character)
        local player = game.Players:GetPlayerFromCharacter(character)
        local highlight = character:FindFirstChildOfClass("Highlight")

        if chamsEnabled and (not excludeLocalPlayer or player ~= game.Players.LocalPlayer) then
            if not highlight then
                highlight = Instance.new("Highlight")
                highlight.Parent = character
            end
            configureHighlight(highlight)
        else
            -- Remove chams if they exist
            if highlight then
                highlight:Destroy()
            end
        end
    end

    -- Event handler for player characters
    local function onPlayerAdded(player)
        player.CharacterAdded:Connect(function(character)
            updateChamsForCharacter(character)
        end)

        if player.Character then
            updateChamsForCharacter(player.Character)
        end
    end

    -- Toggle for Chams Enabled
    Chams_Settings:addToggle({
        text = "Chams Enabled",
        default = chamsEnabled,
        flag = "ChamsEnabled",
        callback = function(state)
            chamsEnabled = state
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player.Character then
                    updateChamsForCharacter(player.Character)
                end
            end
        end
    })

    -- Toggle for Exclude Local Player
    Chams_Settings:addToggle({
        text = "Exclude Local Player",
        default = excludeLocalPlayer,
        flag = "ExcludeLocalPlayer",
        callback = function(state)
            excludeLocalPlayer = state
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player.Character then
                    updateChamsForCharacter(player.Character)
                end
            end
        end
    })

    -- Colorpicker for Chams Fill Color
    Chams_Settings:addColorpicker({
        text = "Chams Fill Color",
        default = chamsFillColor,
        flag = "ChamsFillColor",
        callback = function(state)
            chamsFillColor = state
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player.Character and player.Character:FindFirstChildOfClass("Highlight") then
                    player.Character:FindFirstChildOfClass("Highlight").FillColor = chamsFillColor
                end
            end
        end
    })

    -- Colorpicker for Chams Outline Color
    Chams_Settings:addColorpicker({
        text = "Chams Outline Color",
        default = chamsOutlineColor,
        flag = "ChamsOutlineColor",
        callback = function(state)
            chamsOutlineColor = state
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player.Character and player.Character:FindFirstChildOfClass("Highlight") then
                    player.Character:FindFirstChildOfClass("Highlight").OutlineColor = chamsOutlineColor
                end
            end
        end
    })

    -- Toggle for Outline Enabled
    Chams_Settings:addToggle({
        text = "Outline Enabled",
        default = outlineEnabled,
        flag = "OutlineEnabled",
        callback = function(state)
            outlineEnabled = state
            for _, player in pairs(game:GetService("Players"):GetPlayers()) do
                if player.Character and player.Character:FindFirstChildOfClass("Highlight") then
                    if outlineEnabled then
                        player.Character:FindFirstChildOfClass("Highlight").OutlineTransparency = 0
                    else
                        player.Character:FindFirstChildOfClass("Highlight").OutlineTransparency = 1
                    end
                end
            end
        end
    })

    -- Connect to PlayerAdded event
    game:GetService("Players").PlayerAdded:Connect(onPlayerAdded)

    -- Apply or remove chams for all existing players
    for _, player in pairs(game:GetService("Players"):GetPlayers()) do
        onPlayerAdded(player)
    end
end

local AmongUs_Settings = Tabs.Visuals:createGroup('center', 'Player Model')
do


    -- Declare global variables for the models
    local amongUsPart
    local chickenPart
    
    -- Function to set the visibility of the character's body parts
    local function setBodyPartsVisibility(character, isVisible)
        for _, part in pairs(character:GetChildren()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.Transparency = isVisible and 0 or 1
            elseif part:IsA("Accessory") then
                part.Handle.Transparency = isVisible and 0 or 1
            end
        end
    end
    
    -- Function to create the AmongUs model
    local function createAmongUsModel(character)
        if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
        amongUsPart = Instance.new("Part", workspace)
        amongUsPart.CFrame = character.HumanoidRootPart.CFrame -- Set the model position to the current HumanoidRootPart position
        amongUsPart.CanCollide = false
    
        local amongUsMesh = Instance.new("SpecialMesh")
        amongUsMesh.Parent = amongUsPart
        amongUsMesh.MeshType = "FileMesh"
        amongUsMesh.Scale = Vector3.new(0.2, 0.2, 0.2)
        amongUsMesh.TextureId = "http://www.roblox.com/asset/?id=6686375937"
        amongUsMesh.MeshId = "http://www.roblox.com/asset/?id=6686375902"
    
        local weld = Instance.new("WeldConstraint")
        weld.Part0 = character.HumanoidRootPart
        weld.Part1 = amongUsPart
        weld.Parent = amongUsPart
    
        -- Make the player's body parts invisible
        setBodyPartsVisibility(character, false)
    end
    
    -- Function to remove the AmongUs model and revert visibility
    local function removeAmongUsModel(character)
        if amongUsPart then
            amongUsPart:Destroy()
            amongUsPart = nil
            if character then
                setBodyPartsVisibility(character, true)
            end
        end
    end
    
    -- Function to create the Chicken model
    local function createChickenModel(character)
        if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
        chickenPart = Instance.new("Part", workspace)
        chickenPart.CFrame = character.HumanoidRootPart.CFrame -- Set the model position to the current HumanoidRootPart position
        chickenPart.CanCollide = false
    
        local chickenMesh = Instance.new("SpecialMesh")
        chickenMesh.Parent = chickenPart
        chickenMesh.MeshType = "FileMesh"
        chickenMesh.Scale = Vector3.new(3, 3, 3)
        chickenMesh.TextureId = "http://www.roblox.com/asset/?id=2114220248"
        chickenMesh.MeshId = "http://www.roblox.com/asset/?id=2114220154"
    
        local weld = Instance.new("WeldConstraint")
        weld.Part0 = character.HumanoidRootPart
        weld.Part1 = chickenPart
        weld.Parent = chickenPart
    
        -- Make the player's body parts invisible
        setBodyPartsVisibility(character, false)
    end
    
    -- Function to remove the Chicken model and revert visibility
    local function removeChickenModel(character)
        if chickenPart then
            chickenPart:Destroy()
            chickenPart = nil
            if character then
                setBodyPartsVisibility(character, true)
            end
        end
    end
    
    -- Function to handle character respawn
    local function onCharacterAdded(character)
        character:WaitForChild("HumanoidRootPart") -- Wait for the character to fully load
    
        -- Reapply the selected model based on the toggles
        if Library.flags["AmongUsModelEnabled"] then
            createAmongUsModel(character)
        elseif Library.flags["ChickenModelEnabled"] then
            createChickenModel(character)
        end
    end
    
    -- Connect the CharacterAdded event to reapply models on respawn
    game.Players.LocalPlayer.CharacterAdded:Connect(onCharacterAdded)
    
    -- Initial setup for the current character
    local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    onCharacterAdded(character)
    
    -- Toggle to enable or disable the AmongUs model
    AmongUs_Settings:addToggle({
        text = "AmongUs Model Enabled",
        default = false, -- Default is off
        flag = "AmongUsModelEnabled",
        callback = function(state)
            local character = game.Players.LocalPlayer.Character
            if state then
                removeChickenModel(character) -- Ensure Chicken model is removed when enabling AmongUs model
                createAmongUsModel(character)
            else
                removeAmongUsModel(character)
            end
        end
    })
    
    -- Toggle to enable or disable the Chicken model
    AmongUs_Settings:addToggle({
        text = "Chicken Model Enabled",
        default = false, -- Default is off
        flag = "ChickenModelEnabled",
        callback = function(state)
            local character = game.Players.LocalPlayer.Character
            if state then
                removeAmongUsModel(character) -- Ensure AmongUs model is removed when enabling Chicken model
                createChickenModel(character)
            else
                removeChickenModel(character)
            end
        end
    })
    


-- make sure on if enabled always even if you die updated 8/26/2024
    
end



if game.PlaceId == 2788229376 then
    --// Services

    local Workspace = game:GetService("Workspace")

--// Settings for Bullet Tracers
local BulletSettings = {
Enabled = false, -- Enable or disable bullet tracers
Width = 1.7, -- Width of the tracer
Brightness = 5, -- Brightness of the tracer
Segments = 10, -- Number of segments in the tracer
LightEmission = 10, -- Light emission level
Color = ColorSequence.new({
    ColorSequenceKeypoint.new(0, Color3.fromRGB(240, 175, 235)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 175, 235))
}), -- Color of the tracer
Speed = 3, -- Speed of the texture on the tracer
Texture = 'Normal', -- Texture of the tracer ('Normal' or 'Fog')
}

--// Utility Function to Handle Bullet Tracers
local function HandleBulletTracer(BulletRay)
if BulletSettings.Enabled then
    local GunBeam = BulletRay:WaitForChild('GunBeam', 1)
    GunBeam.Texture = BulletSettings.Texture == 'Normal' and 'rbxassetid://7151778302' or 'rbxassetid://9150635648'
    GunBeam.LightEmission = BulletSettings.LightEmission
    GunBeam.Segments = BulletSettings.Segments
    GunBeam.Brightness = BulletSettings.Brightness
    GunBeam.Color = BulletSettings.Color
    GunBeam.Width0 = BulletSettings.Width
    GunBeam.Width1 = BulletSettings.Width
    GunBeam.Transparency = NumberSequence.new(0) -- Fully opaque tracer
    GunBeam.TextureSpeed = BulletSettings.Speed
end
end

--// Example Usage
Workspace.DescendantAdded:Connect(function(obj)
if obj.Name == "BULLET_RAYS" or obj.Name:lower():find('bullet') then
    HandleBulletTracer(obj)
end
end)

-- Creating a new section under the Visuals tab for Gun-related settings
local GunSection = Tabs.Visuals:createGroup("right", "Gun")

-- Adding a toggle for enabling/disabling bullet tracers
GunSection:addToggle({
    text = "Bullet Tracers Enabled",
    default = BulletSettings.Enabled,  -- Default state from BulletSettings table
    flag = "BulletTracersEnabled",  -- Unique identifier
    callback = function(state)
        BulletSettings.Enabled = state
    end
})

-- Adding a color picker for customizing the bullet tracer color
GunSection:addColorpicker({
    text = "Bullet Tracer Color",
    default = BulletSettings.Color.Keypoints[1].Value,  -- Default color from BulletSettings table
    flag = "BulletTracerColor",  -- Unique identifier
    callback = function(color)
        BulletSettings.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, color),
            ColorSequenceKeypoint.new(1, color)
        })
    end
})
end
local BarVisuals = Tabs.Visuals:createGroup('right', 'Bars')
do

    -- Variables to store original colors
local originalBarColors = {}
local currentBarColor

-- Function to capture default bar colors
local function captureDefaultBarColors()
    local player = game.Players.LocalPlayer
    local screenGui = player.PlayerGui:FindFirstChild("MainScreenGui")

    if screenGui then
        local bars = screenGui:FindFirstChild("Bar")

        if bars then
            -- Store the original colors
            originalBarColors.EnergyBar = bars.Energy.bar.BackgroundColor3
            originalBarColors.ArmorBar = bars.Armor.bar.BackgroundColor3
            originalBarColors.HPBar = bars.HP.bar.BackgroundColor3
            originalBarColors.FireBar = bars.Armor.firebar.BackgroundColor3

            -- Initialize current bar color to the first default color (can be any)
            currentBarColor = originalBarColors.EnergyBar
        else
            warn("Bar elements not found in GUI")
        end
    else
        warn("MainScreenGui not found in PlayerGui")
    end
end

-- Function to apply the selected color to all bars
local function applyBarColor()
    local player = game.Players.LocalPlayer
    local screenGui = player.PlayerGui:FindFirstChild("MainScreenGui")

    if screenGui then
        local bars = screenGui:FindFirstChild("Bar")

        if bars then
            bars.Energy.bar.BackgroundColor3 = currentBarColor
            bars.Armor.bar.BackgroundColor3 = currentBarColor
            bars.HP.bar.BackgroundColor3 = currentBarColor
            bars.Armor.firebar.BackgroundColor3 = currentBarColor
        end
    end
end

-- Function to reset all bar colors to their original defaults
local function resetBarColors()
    local player = game.Players.LocalPlayer
    local screenGui = player.PlayerGui:FindFirstChild("MainScreenGui")

    if screenGui then
        local bars = screenGui:FindFirstChild("Bar")

        if bars then
            bars.Energy.bar.BackgroundColor3 = originalBarColors.EnergyBar
            bars.Armor.bar.BackgroundColor3 = originalBarColors.ArmorBar
            bars.HP.bar.BackgroundColor3 = originalBarColors.HPBar
            bars.Armor.firebar.BackgroundColor3 = originalBarColors.FireBar
        end
    end
end

-- Toggle for enabling/disabling custom colors
local customBarColorsEnabled = false

-- Function to handle toggle for custom bar colors
local function toggleCustomBarColors(state)
    customBarColorsEnabled = state
    if not customBarColorsEnabled then
        resetBarColors()
    else
        applyBarColor()
    end
end

-- UI Components
BarVisuals:addToggle({
    text = "Custom Bar Colors Enabled",
    default = false,
    flag = "CustomBarColorsEnabled",
    callback = function(state)
        toggleCustomBarColors(state)
    end
})

-- Single color picker for all bars
BarVisuals:addColorpicker({
    text = "Bar Color",
    default = currentBarColor, -- Start with the default captured color
    flag = "BarColor",
    callback = function(color)
        currentBarColor = color
        if customBarColorsEnabled then
            applyBarColor()
        end
    end
})

-- Capture the default colors when the script first runs
captureDefaultBarColors()


end


local Skybox_Settings = Tabs.Visuals:createGroup('right', 'Skybox Changer')

do

    -- Create a table to store the original skybox IDs
    local originalSkybox = {}

    -- Create a local variable to store the selected skybox name
    local selectedSkybox = "None" -- Default value is 'None'

    -- Function to save the current skybox
    local function saveCurrentSkybox()
        local currentSkybox = game.Lighting:FindFirstChildOfClass("Sky")
        if currentSkybox then
            originalSkybox.SkyboxBk = currentSkybox.SkyboxBk
            originalSkybox.SkyboxDn = currentSkybox.SkyboxDn
            originalSkybox.SkyboxFt = currentSkybox.SkyboxFt
            originalSkybox.SkyboxLf = currentSkybox.SkyboxLf
            originalSkybox.SkyboxRt = currentSkybox.SkyboxRt
            originalSkybox.SkyboxUp = currentSkybox.SkyboxUp
        end
    end

    -- Function to set a new skybox
    local function setSkybox(skyboxIDs)
        -- Clear any existing skybox before setting a new one
        local existingSkybox = game.Lighting:FindFirstChildOfClass("Sky")
        if existingSkybox then
            existingSkybox:Destroy()
        end

        -- Set the new skybox
        if skyboxIDs then
            local skybox = Instance.new("Sky")
            skybox.Parent = game.Lighting
            skybox.SkyboxBk = skyboxIDs.SkyboxBk
            skybox.SkyboxDn = skyboxIDs.SkyboxDn
            skybox.SkyboxFt = skyboxIDs.SkyboxFt
            skybox.SkyboxLf = skyboxIDs.SkyboxLf
            skybox.SkyboxRt = skyboxIDs.SkyboxRt
            skybox.SkyboxUp = skyboxIDs.SkyboxUp
        end
    end

    -- Skybox options as a local table
    local skyboxOptions = {
        None = nil,  -- 'None' to restore the original skybox
        MARS = {
            SkyboxBk = "rbxassetid://14970139147",
            SkyboxDn = "rbxassetid://14970117768",
            SkyboxFt = "rbxassetid://14970119000",
            SkyboxLf = "rbxassetid://14970126516",
            SkyboxRt = "rbxassetid://14970134649",
            SkyboxUp = "rbxassetid://14970129050",
        },
        PACMAN = {
            SkyboxBk = "rbxassetid://39968386",
            SkyboxDn = "rbxassetid://39968386",
            SkyboxFt = "rbxassetid://39968386",
            SkyboxLf = "rbxassetid://39968386",
            SkyboxRt = "rbxassetid://39968386",
            SkyboxUp = "rbxassetid://39968386",
        },
        vaporwave = {
            SkyboxBk = "rbxassetid://5053423905",
            SkyboxDn = "rbxassetid://5053456401",
            SkyboxFt = "rbxassetid://5053423905",
            SkyboxLf = "rbxassetid://5053423905",
            SkyboxRt = "rbxassetid://5053423905",
            SkyboxUp = "rbxassetid://5053423905",
        },
        anime = {
            SkyboxBk = "rbxassetid://14753804949",
            SkyboxDn = "rbxassetid://14753795573",
            SkyboxFt = "rbxassetid://14753807625",
            SkyboxLf = "rbxassetid://14753797417",
            SkyboxRt = "rbxassetid://14753799966",
            SkyboxUp = "rbxassetid://14753810287",
        },
        Cyberpunk = {
            SkyboxBk = "rbxassetid://13688944232",
            SkyboxDn = "rbxassetid://13688950268",
            SkyboxFt = "rbxassetid://13688946780",
            SkyboxLf = "rbxassetid://13688948683",
            SkyboxRt = "rbxassetid://13688942454",
            SkyboxUp = "rbxassetid://13688952485",
        },
        SpongeBob = {
            SkyboxBk = "rbxassetid://15962101128",
            SkyboxDn = "rbxassetid://15962101128",
            SkyboxFt = "rbxassetid://15962101128",
            SkyboxLf = "rbxassetid://15962101128",
            SkyboxRt = "rbxassetid://15962101128",
            SkyboxUp = "rbxassetid://15962101128",
        }
    }

    -- Create a toggle to enable/disable the skybox changer
    Skybox_Settings:addToggle({
        text = "Skybox Changer Enabled",
        default = false, -- Default is off
        flag = "SkyboxEnabled",
        callback = function(state)
            if state then
                saveCurrentSkybox()

                -- Apply the selected skybox immediately
                if selectedSkybox == "None" then
                    -- Restore original skybox
                    if next(originalSkybox) ~= nil then
                        setSkybox(originalSkybox)
                    else
                        game.Lighting:ClearAllChildren() -- Clears the skybox when original is not saved
                    end
                else
                    -- Apply the selected skybox
                    setSkybox(skyboxOptions[selectedSkybox])
                end
            else
                -- Restore original skybox when disabled
                if next(originalSkybox) ~= nil then
                    setSkybox(originalSkybox)
                else
                    game.Lighting:ClearAllChildren() -- Clears the skybox when original is not saved
                end
            end
        end
    })

    -- Create a list to choose the skybox
    Skybox_Settings:addList({
        text = "Select Skybox:",
        multiselect = false,
        values = {"None", "MARS", "PACMAN", "vaporwave", "anime", "Cyberpunk", "SpongeBob"},
        flag = "Skybox_Selection",
        default = selectedSkybox,  -- Default is 'None'
        callback = function(value)
            selectedSkybox = value  -- Update the local variable when the dropdown changes

            -- Apply the selected skybox immediately if the toggle is on
            if Skybox_Settings.flags and Skybox_Settings.flags.SkyboxEnabled then
                if selectedSkybox == "None" then
                    -- Restore original skybox
                    if next(originalSkybox) ~= nil then
                        setSkybox(originalSkybox)
                    else
                        game.Lighting:ClearAllChildren() -- Clears the skybox when original is not saved
                    end
                else
                    -- Apply the selected skybox
                    setSkybox(skyboxOptions[selectedSkybox])
                end
            end
        end
    })

    
    
end

-- end visuals
-- start misc
local AntiReport_Misc = Tabs.Miscellaneous:createGroup('right', 'Anti Report')

do
    -- Local variable to store the selected mode
    local selectedMode = "Instant" -- Default is 'Instant'

    -- Function to server hop
    local function serverHop()
        local TeleportService = game:GetService("TeleportService")
        local Players = game:GetService("Players")
        local HttpService = game:GetService("HttpService")

        local currentPlaceId = game.PlaceId
        local servers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. currentPlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))

        -- Find a different server to hop to
        for _, server in ipairs(servers.data) do
            if server.playing < server.maxPlayers and server.id ~= game.JobId then
                TeleportService:TeleportToPlaceInstance(currentPlaceId, server.id, Players.LocalPlayer)
                break
            end
        end
    end

    -- Function to notify the user
    local function notifyUser(title, message)
        Library:Notify(string.format("%s: %s", title, message), 15)
    end

    -- Function to handle chat messages
    local function handleChatMessage(message)
        local keywords = {
            "your reported",
            "reported",
            "cheater",
            "cheaters",
            "we have a cheater",
            "reporting",
            "you'll be reported",
            "i'm reporting",
            "reported you",
            "you're reported",
            "report this guy",
            "report this person",
            "report him",
            "report her",
            "hacker",
            "we have a hacker",
            "hacker spotted",
            "this guy is hacking",
            "she's hacking",
            "he's hacking",
            "cheating",
            "we got a cheater",
            "ban this guy",
            "this guy is cheating",
            "exploiter",
            "exploiting",
            "he's exploiting",
            "she's exploiting",
            "this guy is exploiting",
            "exploiter spotted",
            "you're banned",
            "get banned",
            "get this guy banned",
            "banning you",
            "you're getting banned",
            "you're gonna get banned",
            "you're getting reported",
            "reported for cheating",
            "exposing this guy",
            "i'm banning you",
            "i'm banning him",
            "i'm banning her",
            "admin reporting",
            "calling an admin",
            "admin is coming",
            "admin is here",
            "mod reporting",
            "calling a mod",
            "mod is coming",
            "mod is here",
            "banned",
            "urbanned",
            "clipped",
            "clip",
            "ur banned"
        }

        for _, keyword in ipairs(keywords) do
            if string.lower(message):find(string.lower(keyword)) then
                if selectedMode == "Instant" then
                    serverHop() -- Ensure this function is properly defined
                elseif selectedMode == "Notify" then
                    notifyUser("Anti Report", "Potential report detected in chat.")
                end
                break
            end
        end
    end

    -- Create a toggle to enable/disable the Anti Report feature
    AntiReport_Misc:addToggle({
        text = "Anti Report Enabled",
        default = false, -- Default is off
        flag = "AntiReportEnabled",
        callback = function(state)
            if state then
                -- Start monitoring chat messages
                local Players = game:GetService("Players")

                -- Connect to player chat
                local function connectPlayerChat(player)
                    player.Chatted:Connect(function(message)
                        handleChatMessage(message)
                    end)
                end

                -- Connect to all current players
                for _, player in ipairs(Players:GetPlayers()) do
                    connectPlayerChat(player)
                end

                -- Connect to new players
                Players.PlayerAdded:Connect(connectPlayerChat)

            else
                -- You can add any cleanup logic here if needed
            end
        end
    })

    -- Create a dropdown to select the mode (Instant or Notify)
    AntiReport_Misc:addList({
        text = "Select Mode:",
        multiselect = false,
        values = {"Instant", "Notify"},
        flag = "AntiReportMode",
        default = selectedMode, -- Default is 'Instant'
        callback = function(value)
            selectedMode = value  -- Update the local variable when the dropdown changes
        end
    })
end


local TrashTalk_Settings = Tabs.Miscellaneous:createGroup('right', 'Trash Talk')
do
    local trashTalkMessages = {
        "Using the hub? /kirk", 
        "Smooth aim!", 
        "Where’s your aim at?", 
        "Victory secured!", 
        "Try again! /kirk", 
        "Imagine losing!", 
        "Need better aim? /kirk", 
        "Too smooth!", 
        "Wow, just wow!", 
        "1-tapped!", 
        "Get on this level!", 
        "I'm here, ready!", 
        "Flawless!", 
        "Ankles? Gone.", 
        "I did that! /kirk", 
        "On top!", 
        "Another victory!", 
        "LOL, too easy!"
    }
    
    
    -- Function to send a chat message
    local function sayMessage(msg)
        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "ALL")
    end
    
    -- Continuously send trash talk messages every second if enabled
    local trashTalkEnabled = false
    local notifyOnSend = false
    
    local function startTrashTalking()
        while trashTalkEnabled do
            -- Pick a random message from the list
            local message = trashTalkMessages[math.random(1, #trashTalkMessages)]
            
            -- Send the message
            sayMessage(message)
            
            -- Notify user if notifyOnSend is enabled
            if notifyOnSend then
                Library:Notify("Trash Talk Sent", message, 5) -- Adjust the notification duration as needed
            end
            
            -- Wait 1 second before sending the next message
            task.wait(1)
        end
    end
    
    -- Initialize a separate thread for trash talking
    task.spawn(startTrashTalking)
    
    -- Toggle for Trash Talk
    TrashTalk_Settings:addToggle({
        text = "Trash Talk Enabled",
        default = false,
        flag = "TrashTalkEnabled",
        callback = function(state)
            trashTalkEnabled = state
            if state then
                task.spawn(startTrashTalking) -- Start trash talking
            end
        end
    })
    
    -- Toggle for Notify On Send
    TrashTalk_Settings:addToggle({
        text = "Notify On Send",
        default = false,
        flag = "NotifyOnSend",
        callback = function(state)
            notifyOnSend = state
        end
    })
    
end

-- Variables for CashAura
local CashAuraEnabled = false
local Player = game:GetService("Players").LocalPlayer
local Drops = workspace.Ignored.Drop
local Collecting = false

-- Function to collect cash without moving the camera
local function CollectCash()
    spawn(function()
        while task.wait(0.15) do 
            if CashAuraEnabled then 
                for _, v in pairs(Drops:GetChildren()) do 
                    if v.Name == "MoneyDrop" and (v.Position - Player.Character.HumanoidRootPart.Position).magnitude <= 12 then 
                        if not Collecting then 
                            Collecting = true
                            repeat task.wait()
                                -- Directly fire the click detector without moving the camera
                                if v and v:FindFirstChild("ClickDetector") then
                                    fireclickdetector(v.ClickDetector)
                                end
                            until not v or v.Parent == nil or (v.Position - Player.Character.HumanoidRootPart.Position).magnitude > 12
                            Collecting = false
                        end
                    end
                end
            end
        end
    end)
end

-- Add the Miscellaneous tab and useful settings group
local Other_Settings = Tabs.Miscellaneous:createGroup('center', 'Useful')

do
-- Variable to track if No Sit is enabled
local noSitEnabled = false

-- Variable to store the connection for No Sit feature
local noSitConnection

-- Function to prevent sitting
local function preventSitting()
    local player = game.Players.LocalPlayer
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid and humanoid.Sit then
            humanoid.Sit = false
        end
    end
end

-- Function to toggle the "No Sit" feature
local function toggleNoSit(state)
    noSitEnabled = state
    if noSitEnabled then
        -- Enable No Sit by connecting the event
        noSitConnection = game:GetService("RunService").Stepped:Connect(preventSitting)
    else
        -- Disable No Sit by disconnecting the event
        if noSitConnection then
            noSitConnection:Disconnect()
            noSitConnection = nil
        end
    end
end


Other_Settings:addToggle({
    text = "No Sit Enabled",
    default = false, -- Default state is off
    flag = "NoSitEnabled",
    callback = function(state)
        toggleNoSit(state)
    end
})

    -- Add No Jump Cooldown toggle
    Other_Settings:addToggle({
        text = "No Jump Cooldown",
        default = false,
        flag = "NoJumpCooldown",
        callback = function(state)
            if state then
                local newindex = nil
                newindex = hookmetamethod(game, "__newindex", function(self, Index, Value)
                    if not checkcaller() and self:IsA("Humanoid") and Index == "JumpPower" then
                        return
                    end
                    return newindex(self, Index, Value)
                end)
            end
        end
    })

    -- Add No Slow toggle
    local noSlowEnabled = false  -- This variable tracks whether No Slow is active
    local originalNewIndex  -- This will store the original __newindex metamethod

    Other_Settings:addToggle({
        text = "No Slow",
        default = false,
        flag = "NoSlow",
        callback = function(state)
            noSlowEnabled = state  -- Update the variable based on the toggle state

            local mt = getrawmetatable(game)
            
            if noSlowEnabled then
                -- No Slow enabled: override __newindex for WalkSpeed
                if not originalNewIndex then
                    originalNewIndex = mt.__newindex  -- Store the original __newindex only once
                end

                setreadonly(mt, false)
                mt.__newindex = function(self, key, value)
                    if tostring(self) == "Humanoid" and key == "WalkSpeed" and value < 16 then
                        value = 16  -- Force WalkSpeed to stay at or above 16
                    end
                    return originalNewIndex(self, key, value)
                end
                setreadonly(mt, true)
            else
                -- No Slow disabled: restore the original __newindex method
                if originalNewIndex then
                    setreadonly(mt, false)
                    mt.__newindex = originalNewIndex  -- Restore the original __newindex
                    setreadonly(mt, true)
                end
            end
        end
    })

    -- Add Anti Bag toggle
    local antiBagEnabled = false  -- This variable tracks whether Anti Bag is active

    Other_Settings:addToggle({
        text = "Anti Bag",
        default = false,
        flag = "AntiBag",
        callback = function(state)
            antiBagEnabled = state
        end
    })

    -- Heartbeat loop to check for Anti Bag functionality
    game:GetService("RunService").Heartbeat:Connect(function()
        if antiBagEnabled then
            local character = Player.Character
            if character and character:FindFirstChild("Christmas_Sock") then
                character["Christmas_Sock"]:Destroy()
            end
        end
    end)

    -- Add CashAura toggle
    Other_Settings:addToggle({
        text = "CashAura",
        default = false,
        flag = "CashAuraEnabled",
        callback = function(state)
            CashAuraEnabled = state
            if state then
                CollectCash()
            end
        end
    })

    -- Add Auto Stomp toggle
    local autoStompEnabled = false  -- This variable tracks whether Auto Stomp is active

    Other_Settings:addToggle({
        text = "Auto Stomp",
        default = false,
        flag = "AutoStomp",
        callback = function(state)
            autoStompEnabled = state
        end
    })

    -- Heartbeat loop to check if auto stomp should trigger
    game:GetService("RunService").Heartbeat:Connect(function()
        if autoStompEnabled then
            -- Auto Stomp Functionality
            local ReplicatedStorage = game:GetService("ReplicatedStorage")
            local Client = game:GetService("Players").LocalPlayer
            local stompEvent = ReplicatedStorage:FindFirstChild("MainEvent")

            if stompEvent and stompEvent:IsA("RemoteEvent") then
                stompEvent:FireServer("Stomp")
            end
        end
    end)

    -- Add Auto Drop Cash toggle and list
    local autoDropEnabled = false  -- This variable tracks whether Auto Drop Cash is active
    local dropAmount = 8000  -- Default drop amount

    Other_Settings:addToggle({
        text = "Auto Drop Cash",
        default = false,
        flag = "AutoDrop",
        callback = function(state)
            autoDropEnabled = state
        end
    })

    -- Replacing the slider with a list
    Other_Settings:addList({
        text = "Auto Drop Amount",
        multiselect = false,
        values = {"1k", "2k", "3k", "4k", "5k", "6k", "7k", "8k", "9k", "10k"},
        default = "8k",  -- Default value
        flag = "DropAmount",
        callback = function(value)
            dropAmount = tonumber(string.sub(value, 1, -2)) * 1000  -- Converts the selected value to a number in thousands
        end
    })

    -- Heartbeat loop to check for Auto Drop Cash functionality
    game:GetService("RunService").Heartbeat:Connect(function()
        if autoDropEnabled then
            game.ReplicatedStorage.MainEvent:FireServer("DropMoney", dropAmount)
        end
    end)

-- Add Bhop Toggle
-- Add Bhop Toggle
Other_Settings:addToggle({
    text = "Bhop",
    default = false,
    flag = "BhopEnabled",
    callback = function(state)
        local player = game.Players.LocalPlayer
        local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")

        -- Function to handle Bhop
        local function startBhop()
            while Library.flags["BhopEnabled"] do
                humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.MoveDirection.Magnitude > 0 and humanoid:GetState() ~= Enum.HumanoidStateType.Jumping then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
                task.wait(0.6) -- Adjust the wait time for faster/slower bhopping
            end
        end

        -- Start or stop Bhop based on the toggle state
        if state then
            task.spawn(startBhop)
        end
    end
})
end

-- Fix potential security issues with 'kick' method
for k, v in pairs(getgc(true)) do
    if pcall(function() return rawget(v, "indexInstance") end) and type(rawget(v, "indexInstance")) == "table" and (rawget(v, "indexInstance"))[1] == "kick" then
        v.tvk = {"kick", function() return game.Workspace:WaitForChild("") end}
    end
end

-- Fix potential security issues with 'kick' method
for k, v in pairs(getgc(true)) do
    if pcall(function() return rawget(v, "indexInstance") end) and type(rawget(v, "indexInstance")) == "table" and (rawget(v, "indexInstance"))[1] == "kick" then
        v.tvk = {"kick", function() return game.Workspace:WaitForChild("") end}
    end

end

-- Initialize variables
local CC = game:GetService('Workspace').CurrentCamera
local Plr
local enabled = false -- This will still be controlled by the keybind
local dotEnabled = false
local lookAtEnabled = false
local isTargetAimEnabled = false -- New variable controlled by the toggle
local accomidationfactor = 0.127
local dotColor = Color3.fromRGB(255, 66, 211) -- Default color for the dot

local mouse = game.Players.LocalPlayer:GetMouse()
local placemarker = Instance.new("Part", game.Workspace)
local guimain = Instance.new("Folder", game.CoreGui)

-- Function to create a marker
function makemarker(Parent, Adornee, Color, Size, Size2)
    local e = Instance.new("BillboardGui", Parent)
    e.Name = "DONTMISSASHOT"
    e.Adornee = Adornee
    e.Size = UDim2.new(Size, Size2, Size, Size2)
    e.AlwaysOnTop = true
    e.ResetOnSpawn = false -- Ensure it stays in place

    local a = Instance.new("Frame", e)
    a.Size = UDim2.new(1, 0, 1, 0)
    a.BackgroundTransparency = 0
    a.BackgroundColor3 = Color
    local g = Instance.new("UICorner", a)
    g.CornerRadius = UDim.new(0.5, 0) -- Fully rounded

    return e
end

-- Function to find the closest player to the cursor
function getClosestPlayerToCursor()
    local closestPlayer
    local shortestDistance = math.huge

    for i, v in pairs(game.Players:GetPlayers()) do
        if v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health > 0 and v.Character:FindFirstChild("HumanoidRootPart") then
            local pos = CC:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(mouse.X, mouse.Y)).magnitude
            if magnitude < shortestDistance then
                closestPlayer = v
                shortestDistance = magnitude
            end
        end
    end
    return closestPlayer
end

-- Function to toggle target aim (controlled by the keybind)
local function toggleTargetAim(state)
    enabled = state
    if not enabled then
        placemarker.CFrame = CFrame.new(0, 9999, 0) -- Always hide the marker if Target Aim is disabled
    else
        if dotEnabled then
            Plr = getClosestPlayerToCursor() -- Only update player if dot is also enabled
        end
    end
end

-- Function to toggle target aim (controlled by the toggle)
local function setTargetAimEnabled(state)
    isTargetAimEnabled = state
    if not isTargetAimEnabled then
        placemarker.CFrame = CFrame.new(0, 9999, 0) -- Always hide the marker if Target Aim is disabled
    else
        if dotEnabled then
            Plr = getClosestPlayerToCursor() -- Only update player if dot is also enabled
        end
    end
end

-- Function to toggle dot visibility
local function toggleDot(state)
    dotEnabled = state
    if not enabled or not dotEnabled or not isTargetAimEnabled then
        placemarker.CFrame = CFrame.new(0, 9999, 0) -- Always hide the marker if any are disabled
    else
        Plr = getClosestPlayerToCursor() -- Update player only if all conditions are met
    end
end

-- Function to update dot color
local function updateDotColor(color)
    if placemarker and placemarker:FindFirstChild("DONTMISSASHOT") and placemarker.DONTMISSASHOT:FindFirstChild("Frame") then
        placemarker.DONTMISSASHOT.Frame.BackgroundColor3 = color
    end
end

-- Function to make the character look at the target
local function lookAtTarget()
    if lookAtEnabled and enabled and dotEnabled and isTargetAimEnabled and Plr and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = Plr.Character.HumanoidRootPart.Position
        local myHumanoidRootPart = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if myHumanoidRootPart then
            local direction = (targetPosition - myHumanoidRootPart.Position).unit
            -- Calculate the angle to look at the target while ignoring vertical direction
            direction = Vector3.new(direction.x, 0, direction.z).unit
            local lookAtCFrame = CFrame.lookAt(myHumanoidRootPart.Position, myHumanoidRootPart.Position + direction)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = lookAtCFrame
        end
    end
end

-- Setup placemarker
spawn(function()
    placemarker.Anchored = true
    placemarker.CanCollide = false
    placemarker.Size = Vector3.new(12, 12, 12)
    placemarker.Transparency = 1 -- Fully transparent
    makemarker(placemarker, placemarker, dotColor, 0.40, 0)
end)

-- Keybinds and Toggle Integrations
local Combat_Targetaim = Tabs.Combat:createGroup('left', 'Target Aim')

-- Add toggle for target aim (controlled by the toggle)
Combat_Targetaim
    :addToggle({
        text = "Target Aim Enabled",
        default = false,
        flag = "TargetAimEnabled",
        callback = function(state)
            setTargetAimEnabled(state)
            toggleDot(dotEnabled) -- Ensure dot visibility is updated based on current state
        end
    })
    :addKeybind({
        text = "Toggle Target Aim",
        gui = false,
        type = "toggle",
        key = Enum.KeyCode.C,
        flag = "TargetAimKeybind",
        callback = function(state)
            toggleTargetAim(state)
            toggleDot(dotEnabled) -- Ensure dot visibility is updated based on current state
        end
    })

-- Add toggle for dot visibility
Combat_Targetaim
    :addToggle({
        text = "Dot Enabled",
        default = false,
        flag = "DotEnabled",
        callback = function(state)
            toggleDot(state)
        end
    })

-- Add color picker for dot color
Combat_Targetaim
    :addColorpicker({
        text = "Dot Color",
        default = dotColor,
        flag = "DotColor",
        callback = function(color)
            dotColor = color
            updateDotColor(dotColor)
        end
    })

-- Add toggle for look-at feature
Combat_Targetaim
    :addToggle({
        text = "Look At Target",
        default = false,
        flag = "LookAtTarget",
        callback = function(state)
            lookAtEnabled = state
        end
    })

-- Update placemarker position based on target and make character look at target
game:GetService("RunService").Stepped:Connect(function()
    if enabled and dotEnabled and isTargetAimEnabled and Plr and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        local predictedPosition

        if ResolverEnabled then
            -- Use the predicted position if Resolver is enabled
            predictedPosition = Plr.Character.HumanoidRootPart.Position + (ResolverVelocity * 0.1) -- Adjust prediction factor as needed
        else
            -- Use the current position if Resolver is not enabled
            predictedPosition = Plr.Character.HumanoidRootPart.Position
        end

        placemarker.CFrame = CFrame.new(predictedPosition)

        lookAtTarget()
    else
        placemarker.CFrame = CFrame.new(0, 9999, 0) -- Hide the marker if any are disabled or no target
    end
end)

-- Hook mouse hit detection to follow the target
local Hooks = {}
local Client = game.Players.LocalPlayer

Hooks[1] = hookmetamethod(Client:GetMouse(), "__index", newcclosure(function(self, index)
    if index == "Hit" and isTargetAimEnabled and Plr and Plr.Character then
        -- Only redirect shots if Target Aim is enabled via the toggle
        local position = CFrame.new(Plr.Character.HumanoidRootPart.Position + (Plr.Character.HumanoidRootPart.Velocity * accomidationfactor))
        return position
    end
    return Hooks[1](self, index)
end))





-- Main script for movement and UI controls
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
local userInputService = game:GetService("UserInputService")
local camera = workspace.CurrentCamera
local runService = game:GetService("RunService")

-- Initialize variables
local moveSpeed = 50  -- Default speed in studs per second
local keysPressed = {}
local CFrameSpeedEnabled = false  -- Default state of the toggle is off

-- Create UI components
local Menu_Settings = Tabs.Local:createGroup('left', 'Cframe Speed')

-- Define UI components and handlers
do
    -- Add toggle to enable/disable CFrame speed
    Menu_Settings:addToggle({
        text = "Enable CFrame Speed",
        default = false,
        flag = "CFrameSpeedEnabled",
        callback = function(state)
            CFrameSpeedEnabled = state
        end
    })


    -- Add slider to adjust movement speed
    Menu_Settings:addSlider({
        text = "Movement Speed:",
        min = 0,
        max = 100,
        suffix = " studs/s",
        float = 1,
        default = 50,
        flag = "CFrameSpeed",
        callback = function(value)
            moveSpeed = value
        end
    })
end

-- Input handling functions
local function onInputBegan(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    if input.UserInputType == Enum.UserInputType.Keyboard then
        keysPressed[input.KeyCode] = true
    end
end

local function onInputEnded(input)
    if input.UserInputType == Enum.UserInputType.Keyboard then
        keysPressed[input.KeyCode] = nil
    end
end

userInputService.InputBegan:Connect(onInputBegan)
userInputService.InputEnded:Connect(onInputEnded)

-- Function to calculate movement direction relative to the camera
local function getMoveDirection()
    local direction = Vector3.zero
    local camCFrame = camera.CFrame

    -- Get the camera's right and forward vectors, ignoring vertical components
    local camRight = camCFrame.RightVector
    local camForward = camCFrame.LookVector
    camForward = Vector3.new(camForward.x, 0, camForward.z).Unit  -- Ignore vertical component

    -- Adjust direction based on camera orientation
    if keysPressed[Enum.KeyCode.W] then
        direction = direction + camForward  -- Move forward
    end
    if keysPressed[Enum.KeyCode.S] then
        direction = direction - camForward  -- Move backward
    end
    if keysPressed[Enum.KeyCode.A] then
        direction = direction - camRight  -- Move left
    end
    if keysPressed[Enum.KeyCode.D] then
        direction = direction + camRight  -- Move right
    end
    return direction
end

-- Smooth movement function
local function movePlayer()
    runService.Heartbeat:Connect(function(deltaTime)
        if CFrameSpeedEnabled then
            local direction = getMoveDirection()
            if direction.Magnitude > 0 then
                -- Normalize direction to ensure consistent speed
                direction = direction.Unit
                local delta = direction * moveSpeed * deltaTime
                humanoidRootPart.CFrame = humanoidRootPart.CFrame + delta
            end
        end
    end)
end

-- Function to handle character respawn
local function onCharacterAdded(newCharacter)
    humanoidRootPart = newCharacter:WaitForChild("HumanoidRootPart")
    movePlayer()
end

-- Connect respawn event
player.CharacterAdded:Connect(onCharacterAdded)

-- Initial player setup
movePlayer()

local Players = game:GetService("Players")
local Debris = game:GetService("Debris")
local Workspace = game:GetService("Workspace")

local Client = Players.LocalPlayer
local MainColor = Color3.fromRGB(255, 102, 204) -- Default main color
local HitSound = 'Rust' -- Default hit sound
local CloneEnabled = false -- Default state for Clone effect
local ParticleEnabled = false -- Default state for Particle effect

local AssetTable = {
    Sounds = {
        ['OSU']          = 'rbxassetid://7147454322',
        ['Neverlose']    = 'rbxassetid://7216848832',
        ['Bameware']     = 'rbxassetid://3124331820',
        ['Hitmarker']    = 'rbxassetid://160432334',
        ['skeet']        = 'rbxassetid://4817809188',
        ['Rust']         = 'rbxassetid://5043539486',
        ['Lazer Beam']   = 'rbxassetid://130791043',
        ['Bow Hit']      = 'rbxassetid://1053296915',
        ['Bow']          = 'rbxassetid://3442683707',
        ['TF2 Hitsound'] = 'rbxassetid://3455144981',
        ['TF2 Critical'] = 'rbxassetid://296102734',
    },
}

local function HitEffect(Player, Type)
    local Character = Player.Character
    local RootPart = Character and Character:FindFirstChild('HumanoidRootPart')

    if Character and RootPart then
        if Type == 'Pulse' and ParticleEnabled then
            local Attachment = Instance.new('Attachment', RootPart)
            local Particle1 = Instance.new('ParticleEmitter', Attachment) do
                Particle1.Name = 'Particle1'
                Particle1.LightEmission = 3
                Particle1.Transparency = NumberSequence.new(0)
                Particle1.Color = ColorSequence.new(MainColor)
                Particle1.Size = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 6, 1.2)}
                Particle1.Rotation = NumberRange.new(0)
                Particle1.RotSpeed = NumberRange.new(0)
                Particle1.Enabled = false
                Particle1.Rate = 2
                Particle1.Lifetime = NumberRange.new(0.25)
                Particle1.Speed = NumberRange.new(0.1)
                Particle1.Squash = NumberSequence.new(0)
                Particle1.ZOffset = 1
                Particle1.Texture = 'rbxassetid://2916153928'
                Particle1.Orientation = 'VelocityPerpendicular'
                Particle1.Shape = 'Box'
                Particle1.ShapeInOut = 'Outward'
                Particle1.ShapeStyle = 'Volume'
            end
            local Particle2 = Instance.new('ParticleEmitter', Attachment) do
                Particle2.Name = 'Particle1'
                Particle2.LightEmission = 3
                Particle2.Transparency = NumberSequence.new(0)
                Particle2.Color = ColorSequence.new(MainColor)
                Particle2.Size = NumberSequence.new{NumberSequenceKeypoint.new(0, 1), NumberSequenceKeypoint.new(1, 6, 1.2)}
                Particle2.Rotation = NumberRange.new(0)
                Particle2.RotSpeed = NumberRange.new(0)
                Particle2.Enabled = false
                Particle2.Rate = 2
                Particle2.Lifetime = NumberRange.new(0.25)
                Particle2.Speed = NumberRange.new(0.1)
                Particle2.Squash = NumberSequence.new(0)
                Particle2.ZOffset = 1
                Particle2.Texture = 'rbxassetid://2916153928'
                Particle2.Orientation = 'FacingCamera'
                Particle2.Shape = 'Box'
                Particle2.ShapeInOut = 'Outward'
                Particle2.ShapeStyle = 'Volume'
            end

            Particle1:Emit(1)
            Particle2:Emit(1)

            Debris:AddItem(Attachment, 1)
        elseif Type == 'Clone' and CloneEnabled then
            Character.Archivable = true
            local Clone = Character:Clone()
            Clone.Parent = game.Workspace
            Clone.Humanoid.DisplayDistanceType = Enum.HumanoidDisplayDistanceType.None

            for _, v in pairs(Clone:GetDescendants()) do
                if v:IsA('BasePart') then
                    v.Material = Enum.Material.ForceField
                    v.Color = MainColor
                    v.CanCollide = false
                    v.Anchored = true
                    v.CanQuery = false
                    v.CanTouch = false
                end

                if v:IsA('Accessory') or v:IsA('Tool') then
                    v:Destroy()
                end
            end

            for _, v in pairs(Character:GetDescendants()) do
                if v:IsA('BasePart') then
                    local ClonePart = Clone:FindFirstChild(v.Name)

                    if ClonePart then
                        ClonePart.CFrame = v.CFrame
                    end
                end
            end

            Clone:PivotTo(Character.PrimaryPart.CFrame + Vector3.new(Client.Character.HumanoidRootPart.CFrame.lookVector.x * 1.5, 0, Client.Character.HumanoidRootPart.CFrame.lookVector.z * 1.5))

            Character.Archivable = false
            Debris:AddItem(Clone, 2)
        end
    end
end

local function FindTargetOnPart(Part)
    local Target = nil
    local HitPart = nil

    for _, Player in pairs(Players:GetPlayers()) do
        if Player == Client then continue end

        local Char = Player.Character
        local Root = Char and Char:FindFirstChild('HumanoidRootPart')

        for _, Obj in pairs(Char:GetChildren()) do
            if not Obj:IsA('BasePart') then continue end

            local Mag = (Obj.Position - Part.Position).magnitude
            if Mag < 3 then -- Adjust the magnitude check if needed
                Target = Player
                HitPart = Obj
                break
            end
        end

        if Target then
            break
        end
    end

    return Target, HitPart
end

local function SirenAdded(Obj)
    local BulletRay = Obj.Name == 'BULLET_RAYS' or Obj:FindFirstChild('GunBeam')

    if BulletRay then
        local GunBeam = Obj:WaitForChild('GunBeam', 1)
        local Attachment0 = GunBeam and GunBeam.Attachment0 -- Closest to player
        local Attachment1 = GunBeam and GunBeam.Attachment1 -- Mouse position

        if GunBeam then
            local Part = Instance.new('Part', Workspace)
            Part.Anchored = true
            Part.Size = Vector3.new(0.25, 0.25, 0.25)
            Part.Position = Attachment1.WorldCFrame.Position
            Part.Material = Enum.Material.Neon
            Part.Color = MainColor
            Part.CanCollide = false
            Part.Transparency = 1

            Debris:AddItem(Part, 2)

            local Target, HitPart = FindTargetOnPart(Part)
            if Target then

                HitEffect(Target, 'Clone')
                HitEffect(Target, 'Pulse')

                local Sound = Instance.new('Sound', Obj)
                Sound.SoundId = AssetTable.Sounds[HitSound]
                Sound.Volume = 1
                Sound:Play()
            end
        end
    end
end

Workspace.Ignored.Siren.DescendantAdded:Connect(SirenAdded)

local HitDetection = Tabs.Combat:createGroup('left', 'Hitsound')

do
    -- Variable to store the selected material type
    local materialType = "ForceField" -- Default is ForceField

    -- Toggle for enabling/disabling the hit sound
    HitDetection:addToggle({
        text = "Hit Sound Enabled",
        default = false,
        flag = "HitSoundEnabled",
        callback = function(state)
            hitSoundEnabled = state
        end
    })

    -- List for selecting the hit sound type
    HitDetection:addList({
        text = "Select Hit Sound",
        multiselect = false,
        values = {
            "Rust",
            "Gunshot",
            "Ding",
            "Pop",
            "OSU",
            "Neverlose",
            "Bameware",
            "Hitmarker",
            "skeet",
            "Lazer Beam",
            "Bow Hit",
            "Bow",
            "TF2 Hitsound",
            "TF2 Critical",
        },
        default = HitSound,
        flag = "HitSoundType",
        callback = function(value)
            HitSound = value
        end
    })

    -- Color picker for main color
    HitDetection:addColorpicker({
        text = "Main Color",
        default = MainColor,
        flag = "MainColor",
        callback = function(color)
            MainColor = color
        end
    })

    -- Toggle for Clone effect
    HitDetection:addToggle({
        text = "Clone Effect Enabled",
        default = false, -- Default state for Clone effect
        flag = "CloneEnabled",
        callback = function(state)
            CloneEnabled = state
        end
    })

    -- Toggle for Particle effect
    HitDetection:addToggle({
        text = "Particle Effect Enabled",
        default = false, -- Default state for Particle effect
        flag = "ParticleEnabled",
        callback = function(state)
            ParticleEnabled = state
        end
    })

    -- Dropdown to select the material type for the Clone and Particle effects
    HitDetection:addList({
        text = "Select Material Type",
        multiselect = false,
        values = {"Neon", "ForceField"},
        default = materialType,
        flag = "MaterialType",
        callback = function(value)
            materialType = value
        end
    })
end



-- Function to get table keys
local function getTableKeys(tbl)
    local keys = {}
    for key, _ in pairs(tbl) do
        table.insert(keys, key)
    end
    return keys
end

-- Buy Section in Miscellaneous Tab
local AutoBuySettings = Tabs.Miscellaneous:createGroup('left', 'Auto Buy')

do
    -- Define item lists
    local ItemList = {
        Guns = {
            ['LMG'] = '[LMG] - $3978',
            ['AK-47'] = '[AK47] - $2387',
            ['Silencer AR'] = '[SilencerAR] - $1326',
            ['Silencer'] = '[Silencer] - $583',
            ['Revolver'] = '[Revolver] - $1379',
            ['AR'] = '[AR] - $1061',
            ['AUG'] = '[AUG] - $2069',
            ['Double-Barrel'] = '[Double-Barrel SG] - $1432',
            ['Drum Gun'] = '[DrumGun] - $3183',
            ['Flamethrower'] = '[Flamethrower] - $15914',
            ['Glock'] = '[Glock] - $318',
            ['P90'] = '[P90] - $1061',
            ['RPG'] = '[RPG] - $6365',
            ['Rifle'] = '[Rifle] - $1644',
            ['SMG'] = '[SMG] - $796',
            ['Shotgun'] = '[Shotgun] - $1326',
            ['Tactical Shotgun'] = '[TacticalShotgun] - $1857',
        },
        Ammo = {
            ['LMG Ammo'] = '200 [LMG Ammo] - $318',
            ['AK-47 Ammo'] = '90 [AK47 Ammo] - $85',
            ['Silencer AR Ammo'] = '120 [SilencerAR Ammo] - $80',
            ['Silencer Ammo'] = '25 [Silencer Ammo] - $53',
            ['Revolver Ammo'] = '12 [Revolver Ammo] - $80',
            ['AR Ammo'] = '100 [AR Ammo] - $80',
            ['AUG Ammo'] = '90 [AUG Ammo] - $85',
            ['Double-Barrel SG Ammo'] = '18 [Double-Barrel SG Ammo] - $53',
            ['DrumGun Ammo'] = '100 [DrumGun Ammo] - $212',
            ['Flamethrower Ammo'] = '140 [Flamethrower Ammo] - $1644',
            ['Glock Ammo'] = '25 [Glock Ammo] - $64',
            ['P90 Ammo'] = '120 [P90 Ammo] - $64',
            ['RPG Ammo'] = '5 [RPG Ammo] - $1061',
            ['Rifle Ammo'] = '5 [Rifle Ammo] - $265',
            ['SMG Ammo'] = '80 [SMG Ammo] - $64',
            ['Shotgun Ammo'] = '20 [Shotgun Ammo] - $64',
            ['TacticalShotgun Ammo'] = '20 [TacticalShotgun Ammo] - $64',
        }
    }

    -- Function to handle the purchase of items
    local function purchaseItem(itemName)
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local rootPart = character:FindFirstChild("HumanoidRootPart")

        -- Check if the item exists in the shop
        local shopItem = game.Workspace.Ignored.Shop:FindFirstChild(itemName)
        if shopItem and shopItem:FindFirstChild("ClickDetector") then
            local clickDetector = shopItem.ClickDetector
            local originalPosition = rootPart.CFrame
            rootPart.CFrame = shopItem.Head.CFrame -- Move to item

            task.wait(0.15) -- Short delay to ensure correct positioning
            fireclickdetector(clickDetector) -- Purchase item
            task.wait(0.15) -- Short delay post-purchase

            rootPart.CFrame = originalPosition -- Return to original position
        else
            print("Item not found or can't be purchased.")
        end
    end

    -- Dropdown to select a gun
    AutoBuySettings:addList({
        text = "Select Gun to Buy",
        multiselect = false,
        values = getTableKeys(ItemList.Guns), -- Use the getTableKeys function
        default = "LMG",
        flag = "SelectedGun",
        callback = function(value)
            selectedGun = value
        end
    })

    -- Button to buy the selected gun
    AutoBuySettings:addButton({
        text = "Buy Gun",
        callback = function()
            if selectedGun then
                purchaseItem(ItemList.Guns[selectedGun])
            else
                print("No gun selected.")
            end
        end
    })

    -- Dropdown to select ammo
    AutoBuySettings:addList({
        text = "Select Ammo to Buy",
        multiselect = false,
        values = getTableKeys(ItemList.Ammo), -- Use the getTableKeys function
        default = "LMG Ammo",
        flag = "SelectedAmmo",
        callback = function(value)
            selectedAmmo = value
        end
    })

    -- Button to buy the selected ammo
    AutoBuySettings:addButton({
        text = "Buy Ammo",
        callback = function()
            if selectedAmmo then
                purchaseItem(ItemList.Ammo[selectedAmmo])
            else
                print("No ammo selected.")
            end
        end
    })
end




-- Buy Section in Miscellaneous Tab
local Misc_Movement = Tabs.Local:createGroup('center', 'Misc Movement')
do
    local teleportEnabled = false  -- Variable to track if teleport is enabled
    local teleportKey = Enum.KeyCode.Q  -- Default key to teleport

    -- Function to teleport the player to the mouse position
    local function teleportToMouse()
        if teleportEnabled then
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local mousePosition = player:GetMouse().Hit.p
                character.HumanoidRootPart.CFrame = CFrame.new(mousePosition)
            end
        end
    end

    -- Add toggle for teleportation
    Misc_Movement:addToggle({
        text = "Teleport to Mouse Enabled",
        default = false,
        flag = "TeleportEnabled",
        callback = function(state)
            teleportEnabled = state
        end
    }):addKeybind({
        text = "Teleport Key",
        gui = true,  -- Allow the keybind to show in the GUI
        type = "bind",
        key = teleportKey,  -- Use the variable teleportKey
        flag = "TeleportKey",
        callback = function(key)
            teleportKey = key  -- Update the teleport key variable
        end
    })

    -- Bind the teleport function to the key press
    game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessedEvent)
        if gameProcessedEvent then return end  -- Prevent actions when typing in the chat or other UI elements

        if input.KeyCode == teleportKey and teleportEnabled then
            teleportToMouse()
        end
    end)
end


local AA = Tabs.Local:createGroup('right', 'Anti Aim')

do
    --// Services
    local Players = game:GetService("Players")
    local RunService = game:GetService("RunService")
    local Camera = workspace.CurrentCamera

    local Client = Players.LocalPlayer

    --// Variables
    local Desync = {}
    local desyncToggle = false -- Controls if desync can be toggled with the keybind
    local desyncEnabled = false  -- Actual state of desync
    local originalPosition = nil -- To store the original position
    local Script = {
        Functions = {},
        Connections = {},
        Locals = {
            NetworkShouldSleep = false,
            OriginalVelocity = {}
        }
    }
    local DummyPart

    -- Function to create a dummy block inside the character
    local function createDummyBlock(character)
        local dummyBlock = Instance.new("Part")
        dummyBlock.Size = Vector3.new(2, 2, 2)
        dummyBlock.Transparency = 1
        dummyBlock.Anchored = true
        dummyBlock.CanCollide = false
        dummyBlock.Name = "CameraAnchor"
        dummyBlock.Parent = character
        return dummyBlock
    end

    -- Function to set the camera to focus on the dummy block
    local function setCameraToDummyBlock(dummyBlock)
        Camera.CameraSubject = dummyBlock
    end

    -- Function to reset the camera to the character's Humanoid
    local function resetCamera()
        local character = Client.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                Camera.CameraSubject = humanoid
            end
        end
    end

    -- Function to reset character's velocity, CFrame, and animations
    local function resetCharacterMovement()
        local character = Client.Character
        if character then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoidRootPart then
                humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
                humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                humanoidRootPart.CFrame = humanoidRootPart.CFrame -- Reset to its current position to stop movement
            end
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Freefall) -- Reset animation state
                task.wait() -- Allow state to apply
                humanoid:ChangeState(Enum.HumanoidStateType.Running) -- Set to running for normal animation
                humanoid:Move(Vector3.new(0, 0, 0)) -- Reset any lingering movement states
            end
        end
    end

    -- Function to toggle CFrame Desync with camera block setup
    local function toggleCFrameDesync()
        if desyncEnabled then
            -- Disable Desync
            desyncEnabled = false
            resetCamera()

            -- Clean up dummy part if it exists
            if DummyPart then
                DummyPart:Destroy()
                DummyPart = nil
            end

            -- Reset any desync CFrame changes
            Desync.cframe = nil

            -- Reset character movement and physics
            resetCharacterMovement()

            -- Restore network and physics properties
            if Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") then
                sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", false)
                setfflag("S2PhysicsSenderRate", "15")
                setfflag("PhysicsSenderMaxBandwidthBps", "38760")
            end

            -- Ensure all desync effects are cleared
            Script.Functions.Update_Desync(false)
        else
            -- Enable Desync
            desyncEnabled = true
            local Character = Client.Character
            if Character then
                local RootPart = Character:FindFirstChild("HumanoidRootPart")
                originalPosition = RootPart and RootPart.CFrame or CFrame.new() -- Store original position

                local Position = RootPart and RootPart.CFrame or CFrame.new()

                -- Create a dummy block inside the character for camera attachment
                DummyPart = Character:FindFirstChild("CameraAnchor") or createDummyBlock(Character)
                DummyPart.CFrame = Position
                setCameraToDummyBlock(DummyPart)

                -- Desync loop
                task.spawn(function()
                    while desyncEnabled do
                        if not Character or not RootPart then break end

                        -- Move the actual HumanoidRootPart far away
                        Desync.cframe = (RootPart.CFrame * CFrame.new(9e9, 0/0, 9e9))

                        -- Update dummy part to simulate being the player's position
                        DummyPart.CFrame = Position
                        task.wait(0.1)

                        -- Reset the actual HumanoidRootPart back
                        Desync.cframe = Position
                        task.wait(0.1)
                        Desync.cframe = nil
                    end
                end)
            end
        end
    end

    -- Invisible Desync Function
    Script.Functions.Update_Desync = function(bool)
        if not bool then
            if Script.Connections['Invisible Desync'] then
                Script.Connections['Invisible Desync']:Disconnect()
                Script.Connections['Invisible Desync'] = nil
            end

            if Client.Character and Client.Character:FindFirstChild("HumanoidRootPart") then
                setfflag('S2PhysicsSenderRate', 15)
                setfflag('PhysicsSenderMaxBandwidthBps', 38760)
                sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", false)
            end
        end
    end

    -- Function to handle Invisible Desync
    Script.Functions.InvisibleDesync = function()
        if not Script.Connections["Invisible Desync"] then
            Script.Connections["Invisible Desync"] = RunService.Heartbeat:Connect(function()
                if not desyncEnabled then return end -- Only execute when desync is enabled

                local character = Client.Character
                local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
                if not humanoidRootPart then return end

                Script.Locals.NetworkShouldSleep = not Script.Locals.NetworkShouldSleep
                setfflag("S2PhysicsSenderRate", tostring(2))
                setfflag("PhysicsSenderMaxBandwidthBps", tostring(math.pi / 3))

                sethiddenproperty(humanoidRootPart, "NetworkIsSleeping", Script.Locals.NetworkShouldSleep)
                Script.Locals.OriginalVelocity[1] = humanoidRootPart.Velocity
                Script.Locals.OriginalVelocity[2] = humanoidRootPart.AssemblyLinearVelocity

                humanoidRootPart.Velocity = humanoidRootPart.Velocity + Vector3.new(math.random(-16000, 16000), math.random(-16000, 16000), math.random(-16000, 16000))
                humanoidRootPart.AssemblyLinearVelocity = humanoidRootPart.AssemblyLinearVelocity + Vector3.new(math.random(-16000, 16000), math.random(-16000, 16000), math.random(-16000, 16000))

                RunService.RenderStepped:Wait()

                humanoidRootPart.Velocity = Script.Locals.OriginalVelocity[1]
                humanoidRootPart.AssemblyLinearVelocity = Script.Locals.OriginalVelocity[2]
                setfflag("S2PhysicsSenderRate", tostring(1))
                Script.Locals.NetworkShouldSleep = not Script.Locals.NetworkShouldSleep
            end)
        end
        RunService.RenderStepped:Wait()
        sethiddenproperty(Client.Character.HumanoidRootPart, "NetworkIsSleeping", Script.Locals.NetworkShouldSleep)
        setfflag("S2PhysicsSenderRate", tostring(15))
    end

    -- PostSimulation function to handle CFrame Desync
    local function PostSimulation()
        if desyncEnabled then
            local LocalCharacter = Client.Character
            local LocalRootPart = LocalCharacter:FindFirstChild("HumanoidRootPart")

            if not LocalRootPart then return end

            Desync.ClientLocation = LocalRootPart.CFrame

            if Desync.cframe then
                LocalRootPart.CFrame = Desync.cframe
            end

            RunService.PreRender:Wait()

            LocalRootPart.CFrame = Desync.ClientLocation
            Desync.ClientLocation = nil
        end
    end

    -- Initialize
    Script.Functions.InvisibleDesync()
    RunService.PostSimulation:Connect(PostSimulation)

    -- GUI toggle for enabling/disabling desync keybind
    AA:addToggle({
        text = "Void Spam",
        default = false,
        flag = "DesyncToggle",
        callback = function(state)
            desyncToggle = state
            if not state and desyncEnabled then
                toggleCFrameDesync()
            end
        end
    }):addKeybind({
        text = "Void Spam",
        gui = true,
        type = "toggle",
        key = Enum.KeyCode.V,
        flag = "DesyncKeybind",
        callback = function()
            if desyncToggle then -- Only work if toggle is on
                toggleCFrameDesync()
                Library:Notify("Desync", desyncEnabled and "Enabled" or "Disabled", 5)
            end
        end
    })
end






local Target_Strafe = Tabs.Combat:createGroup('center', 'TStrafe')

do
    -- Target Strafe Setup
    local Client = game:GetService("Players").LocalPlayer
    local RunService = game:GetService("RunService")
    local Workspace = game:GetService("Workspace")
    local MainColor = Color3.fromRGB(255, 102, 204)

    local Target -- The target player character to strafe around
    local tStrafeEnabled = false -- Toggle state for target strafing
    local strafeMode = 'Circle' -- Default strafing mode
    local strafeRadius = 9 -- Default strafing distance
    local strafeSpeed = 2 -- Default strafing speed
    local strafeHeight = 0 -- Default height offset for strafing
    local minimumRadius = 3 -- Minimum radius for strafing
    local angle_Y = 0 -- Angle for circular strafing
    local VisualizeCircle = false -- Toggle state for visualizing strafing path

    -- Function to generate random CFrame offsets for randomized strafing
    local function GetRandomCFrame(positive, Min, Max)
        if positive then
            return CFrame.new(math.random(Min, Max), math.random(0, 5), math.random(Min, Max))
        else
            return CFrame.new(-math.random(Min, Max), math.random(0, 5), -math.random(Min, Max))
        end
    end

    -- Function to visualize strafing movement for debugging or UI purposes
    local function VisualizeMovement(position)
        local Ball = Instance.new('Part')
        Ball.Anchored = true
        Ball.Size = Vector3.new(0.5, 0.5, 0.5)
        Ball.Shape = Enum.PartType.Ball
        Ball.Color = MainColor
        Ball.Material = Enum.Material.ForceField
        Ball.CFrame = position
        Ball.CanCollide = false
        Ball.Parent = Workspace
        game:GetService("Debris"):AddItem(Ball, 2)
    end

    -- Function to perform strafing around a target
    local function strafeAroundTarget(target, deltaTime)
        -- Check if strafing is enabled and a valid target is present
        if not tStrafeEnabled or not isTargetAimEnabled or not target or not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then
            return
        end

        local character = Client.Character
        if not character then return end

        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        local targetRootPart = target.Character:FindFirstChild("HumanoidRootPart")

        if humanoidRootPart and targetRootPart then
            if strafeMode == 'Circle' then
                -- Calculate the new angle for strafing in a circular motion
                angle_Y = angle_Y + (deltaTime * strafeSpeed) -- Increase angle change rate with speed
                local offset = CFrame.new(math.sin(angle_Y) * strafeRadius, strafeHeight, math.cos(angle_Y) * strafeRadius)
                humanoidRootPart.CFrame = CFrame.new(targetRootPart.Position) * offset

            elseif strafeMode == 'Randomize' then
                -- Randomized strafing around the target
                local randomDirection = math.random(1, 6)
                local newCFrame
                if randomDirection <= 3 then
                    newCFrame = targetRootPart.CFrame * GetRandomCFrame(true, minimumRadius, strafeRadius)
                else
                    newCFrame = targetRootPart.CFrame * GetRandomCFrame(false, minimumRadius, strafeRadius)
                end
                humanoidRootPart.CFrame = humanoidRootPart.CFrame:Lerp(newCFrame, 0.4 + (0.1 * strafeSpeed)) -- Smooth transition, faster with higher speed

            elseif strafeMode == 'On Top' then
                -- Strafing directly above the target with tiny circles
                local tinyCircleRadius = 0.5 -- Very small radius for tiny circles
                angle_Y = angle_Y + (deltaTime * strafeSpeed) * 5 -- Faster tiny circle rotation
                local abovePosition = targetRootPart.Position + Vector3.new(math.sin(angle_Y) * tinyCircleRadius, strafeHeight + 10, math.cos(angle_Y) * tinyCircleRadius)
                humanoidRootPart.CFrame = CFrame.new(abovePosition)
            end

            if VisualizeCircle then
                VisualizeMovement(humanoidRootPart.CFrame)
            end
        end
    end

    -- Function to continuously check and update target aiming and strafing
    local function checkTargetAim()
        if tStrafeEnabled and isTargetAimEnabled and Plr then
            Target = Plr -- Set the Target to the currently aimed player from Target Aim
            -- Print statement for debugging
            
        
            -- Instantly move to the first target position
            strafeAroundTarget(Target, 0)
            -- Continue strafing with smoother transitions
            while tStrafeEnabled and isTargetAimEnabled and Target do
                strafeAroundTarget(Target, 0.05) -- Smaller deltaTime for more frequent updates
                task.wait(1 / (strafeSpeed * 2)) -- Increase frequency with higher speed
            end
        end
    end

    -- GUI setup: Toggle for enabling/disabling Target Strafe
    Target_Strafe:addToggle({
        text = "TStrafe Enabled",
        default = false,
        flag = "TStrafeEnabled",
        callback = function(state)
            tStrafeEnabled = state
            if tStrafeEnabled then
                checkTargetAim()
            end
        end
    })

    -- GUI setup: Dropdown to select the strafe mode
    Target_Strafe:addList({
        text = "Strafe Mode",
        multiselect = false,
        values = {"Circle", "Randomize", "On Top"},
        flag = "StrafeMode",
        default = "Circle",
        callback = function(value)
            strafeMode = value
        end
    })

    -- GUI setup: Slider for strafing speed
    Target_Strafe:addSlider({
        text = "Strafe Speed",
        min = 1,
        max = 10,
        suffix = " speed",
        default = strafeSpeed,
        flag = "StrafeSpeed",
        callback = function(value)
            strafeSpeed = value
        end
    })

    -- GUI setup: Slider for strafing radius
    Target_Strafe:addSlider({
        text = "Strafe Distance",
        min = 1,
        max = 20,
        suffix = " studs",
        default = strafeRadius,
        flag = "StrafeRadius",
        callback = function(value)
            strafeRadius = value
        end
    })

    --// Heartbeat connection for continuous strafing
    RunService.Heartbeat:Connect(function(deltaTime)
        if tStrafeEnabled and isTargetAimEnabled and Plr then
            Target = Plr -- Update Target every frame if strafing is enabled and Target Aim is active
            strafeAroundTarget(Target, deltaTime)
        end
    end)


-- // Services


local RunService = game:GetService("RunService")

-- // Variables
local Client = Players.LocalPlayer

-- Variables for Autofire and Auto Reload
local autofireEnabled = false
local autoReloadEnabled = false

-- Function to get the current tool (gun)
local function GetTool()
    local Character = Client.Character
    local Tool = nil

    if not Character then
        return Tool
    end

    for _, v in pairs(Character:GetChildren()) do
        if v:IsA('Tool') and v:FindFirstChild('Ammo') and v:FindFirstChild('MaxAmmo') then
            Tool = v
        end
    end

    return Tool
end

-- Function to reload the tool (gun)
local function Reload(Object)
    local KOValue = Client.Character:WaitForChild('BodyEffects')['K.O'].Value

    if Object and KOValue ~= true then
        ReplicatedStorage:FindFirstChild('MainEvent'):FireServer('Reload', Object)
    end
end

-- Function to auto-reload when ammo is depleted
local function AutoReload()
    while autoReloadEnabled and task.wait(0.07) do
        local Gun = GetTool()
        if Gun and Gun.Ammo.Value == 0 then
            Reload(Gun)
        end
    end
end

-- Auto Fire function
local function AutoFire()
    RunService.Heartbeat:Connect(function()
        if autofireEnabled then
            local tool = GetTool()
            if tool then
                pcall(function() tool:Activate() end) -- Safely activate the tool
            end
        end
    end)
end

-- Initialize Auto Fire
AutoFire()


Target_Strafe:addToggle({
    text = "Auto Reload",
    default = false,
    flag = "AutoReloadEnabled",
    callback = function(state)
        autoReloadEnabled = state
        if autoReloadEnabled then
            task.spawn(AutoReload)  -- Start the auto-reload loop
        end
    end
})

Target_Strafe:addToggle({
    text = "Auto Fire",
    default = false,
    flag = "AutoFireEnabled",
    callback = function(state)
        autofireEnabled = state
    end
})




end











local Misc_Settings = Tabs.Local:createGroup('center', 'Misc')
do
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- High Jump variables
local highJumpEnabled = false
local jumpHeight = 50 -- Default jump height in studs
local highJumpKeybind = Enum.KeyCode.H -- Default key for toggling high jump

-- Noclip variables
local noclipEnabled = false
local runService = game:GetService("RunService")

-- High Jump Toggle and Slider with Keybind
Misc_Settings:addToggle({
    text = "High Jump Enabled",
    default = false,
    flag = "HighJumpEnabled",
    callback = function(state)
        highJumpEnabled = state
    end
}):addKeybind({
    text = "High Jump Keybind",
    gui = true,
    type = "toggle",
    key = highJumpKeybind, -- Default keybind
    flag = "HighJumpKeybind",
    callback = function(key)
        highJumpKeybind = key -- Update keybind
    end
})

Misc_Settings:addSlider({
    text = "Jump Height",
    min = 10,
    max = 100,
    suffix = " studs",
    float = 1,
    default = 50,
    flag = "JumpHeight",
    callback = function(value)
        jumpHeight = value
    end
})

-- Noclip Toggle
Misc_Settings:addToggle({
    text = "Noclip Enabled",
    default = false,
    flag = "NoclipEnabled",
    callback = function(state)
        noclipEnabled = state
    end
})

-- High Jump Logic
game:GetService("UserInputService").JumpRequest:Connect(function()
    if highJumpEnabled then
        character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
        humanoidRootPart = character:WaitForChild("HumanoidRootPart")
        humanoidRootPart.CFrame = humanoidRootPart.CFrame + Vector3.new(0, jumpHeight, 0)
    end
end)

-- Noclip Logic
runService.Stepped:Connect(function()
    if noclipEnabled then
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") and part.CanCollide then
                part.CanCollide = false
            end
        end
    end
end)

-- High Jump Keybind Logic
game:GetService("UserInputService").InputBegan:Connect(function(input, gameProcessed)
    if input.KeyCode == highJumpKeybind then
        highJumpEnabled = not highJumpEnabled
        Library:Notify("High Jump", highJumpEnabled and "Enabled" or "Disabled", 5)
    end
end)

-- Character respawn handling for both features
game.Players.LocalPlayer.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    if highJumpEnabled then
        humanoidRootPart.CFrame = humanoidRootPart.CFrame + Vector3.new(0, jumpHeight, 0)
    end

    if noclipEnabled then
        runService.Stepped:Connect(function()
            if noclipEnabled then
                for _, part in pairs(character:GetDescendants()) do
                    if part:IsA("BasePart") and part.CanCollide then
                        part.CanCollide = false
                    end
                end
            end
        end)
    end
end)
end

-- Initialize variables for Resolver
local ResolverEnabled = false
local ResolverVelocity = Vector3.new(0, 0, 0)

-- Function to calculate velocity of a player
local function CalculateVelocity(player)
    local character = player.Character
    local rootPart = character and character:FindFirstChild("HumanoidRootPart")
    local velocity = Vector3.new()

    if character and rootPart then
        local initialPos = rootPart.Position
        local initialTime = tick()

        task.wait(0.0035)  -- Small delay to measure velocity

        local finalPos = rootPart.Position
        local finalTime = tick()

        local deltaTime = finalTime - initialTime
        velocity = (finalPos - initialPos) / deltaTime
    end

    return velocity
end

-- Function to update target velocity
local function UpdateResolverVelocity(target)
    if target then
        ResolverVelocity = CalculateVelocity(target)
    end
end

-- Hook mouse hit detection to follow the target with prediction
local Hooks = {}
local Client = game.Players.LocalPlayer

Hooks[1] = hookmetamethod(Client:GetMouse(), "__index", newcclosure(function(self, index)
    if index == "Hit" and ResolverEnabled and Plr and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        -- Predict position based on velocity and adjust the hit accordingly
        local predictedPosition = Plr.Character.HumanoidRootPart.Position + (ResolverVelocity * 0.1) -- Adjust prediction factor as needed
        local position = CFrame.new(predictedPosition)
        return position
    end
    return Hooks[1](self, index)
end))

-- Periodically update target velocity
game:GetService("RunService").Heartbeat:Connect(function()
    if ResolverEnabled and Plr then
        UpdateResolverVelocity(Plr)
    end
end)

-- Add Toggle for Resolver in the Target Aim Section
Combat_Targetaim:addToggle({
    text = "Resolver Enabled",
    default = false,
    flag = "ResolverEnabled",
    callback = function(state)
        ResolverEnabled = state
        if not state then
            ResolverVelocity = Vector3.new(0, 0, 0)
        end
    end
})

local HttpService = game:GetService("HttpService")

local Fonts = {}
function Fonts:Register_Font(Name, Weight, Style, Asset)
    if not isfile(Asset.Id) then
        writefile(Asset.Id, Asset.Font)
    end
    if isfile(Name .. ".font") then
        delfile(Name .. ".font")
    end
    local Data = {
        name = Name,
        faces = {
            {
                name = "Regular",
                weight = Weight,
                style = Style,
                assetId = getcustomasset(Asset.Id),
            },
        },
    }
    writefile(Name .. ".font", HttpService:JSONEncode(Data))
    return getcustomasset(Name .. ".font");
end

Fonts.ProggyTiny = Font.new(Fonts:Register_Font("ProggyClean", 200, "normal", {
    Id = "ProggyClean.ttf",
    Font = crypt.base64.decode(""),
}))

-- Ensure all necessary services are defined
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local RunService = game:GetService("RunService")

local Target -- This should be updated dynamically based on your target-aim system
local GUI = {}
local targetGUIEnabled = false -- Controls Target GUI visibility

local maxUsernameLength = 8 -- Max length for usernames in GUI

-- Function to truncate a string to a certain number of characters and add ellipsis if needed
local function truncateText(text, maxLength)
    if #text > maxLength then
        return text:sub(1, maxLength) .. "..."
    else
        return text
    end
end

-- Function to create the main GUI and elements
local function createTargetGUI()
    -- Create the main ScreenGui and parent it to PlayerGui
    GUI.MainGui = Instance.new("ScreenGui", PlayerGui)

    -- Create the main frame inside ScreenGui
    GUI.MainFrame = Instance.new("Frame", GUI.MainGui)
    GUI.MainFrame.BorderSizePixel = 0
    GUI.MainFrame.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
    GUI.MainFrame.Size = UDim2.new(0, 387, 0, 120)
    GUI.MainFrame.Position = UDim2.new(0.40527, 0, 0.74749, 0)  -- Original position
    GUI.MainFrame.BorderColor3 = Color3.fromRGB(0, 0, 0)
    GUI.MainFrame.Active = true -- Make the frame active to detect input for dragging
    GUI.MainFrame.Draggable = true -- Enable dragging
    GUI.MainFrame.Visible = false -- Initially hidden

    -- Add a UIStroke to the main frame for styling
    GUI.FrameStroke = Instance.new("UIStroke", GUI.MainFrame)
    GUI.FrameStroke.Color = Color3.fromRGB(16, 16, 16)

    -- Create a sub-frame inside the main frame (used for padding or decoration)
    GUI.SubFrame1 = Instance.new("Frame", GUI.MainFrame)
    GUI.SubFrame1.BorderSizePixel = 0
    GUI.SubFrame1.BackgroundColor3 = Color3.fromRGB(21, 21, 21)
    GUI.SubFrame1.Size = UDim2.new(0, 100, 0, 100)
    GUI.SubFrame1.Position = UDim2.new(0.03, 0, 0.1, 0)
    GUI.SubFrame1.BorderColor3 = Color3.fromRGB(0, 0, 0)

    -- Create ImageLabel to display the headshot inside SubFrame1
    GUI.Headshot = Instance.new("ImageLabel", GUI.SubFrame1)
    GUI.Headshot.Size = UDim2.new(1, 0, 1, 0)  -- Fill the sub-frame
    GUI.Headshot.BackgroundTransparency = 1   -- No background, just the image
    GUI.Headshot.Image = ""  -- Player headshot image, to be updated
    GUI.Headshot.ScaleType = Enum.ScaleType.Crop

    -- Create another sub-frame inside the main frame (bottom status bar for health bar)
    GUI.HealthBarBackground = Instance.new("Frame", GUI.MainFrame)
    GUI.HealthBarBackground.BorderSizePixel = 0
    GUI.HealthBarBackground.BackgroundColor3 = Color3.fromRGB(16, 16, 16)  -- Background color of the health bar
    GUI.HealthBarBackground.Size = UDim2.new(0, 257, 0, 25)
    GUI.HealthBarBackground.Position = UDim2.new(0.312, 0, 0.7, 0)
    GUI.HealthBarBackground.BorderColor3 = Color3.fromRGB(0, 0, 0)

    -- Create the health bar that fills up inside the health bar background
    GUI.HealthBar = Instance.new("Frame", GUI.HealthBarBackground)
    GUI.HealthBar.BorderSizePixel = 0
    GUI.HealthBar.BackgroundColor3 = Color3.fromRGB(184, 166, 255)  -- Color of the filled health bar
    GUI.HealthBar.Size = UDim2.new(1, 0, 1, 0)  -- Start fully filled (100% health)
    GUI.HealthBar.Position = UDim2.new(0, 0, 0, 0)
    GUI.HealthBar.BorderColor3 = Color3.fromRGB(0, 0, 0)

    -- Add TextLabel to display the username
    GUI.UsernameLabel = Instance.new("TextLabel", GUI.MainFrame)
    GUI.UsernameLabel.BorderSizePixel = 0
    GUI.UsernameLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    GUI.UsernameLabel.TextSize = 14
    GUI.UsernameLabel.FontFace = Fonts.ProggyTiny -- Use the custom registered font
    GUI.UsernameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    GUI.UsernameLabel.BackgroundTransparency = 1
    GUI.UsernameLabel.Size = UDim2.new(0, 200, 0, 50)
    GUI.UsernameLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    GUI.UsernameLabel.Position = UDim2.new(0.46, -100, 0.05, 0)  -- Centered horizontally
    GUI.UsernameLabel.TextXAlignment = Enum.TextXAlignment.Center -- Center the text within the label

    -- Add TextLabel to display health (slightly more to the right)
    GUI.HealthLabel = Instance.new("TextLabel", GUI.MainFrame)
    GUI.HealthLabel.BorderSizePixel = 0
    GUI.HealthLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    GUI.HealthLabel.TextSize = 14
    GUI.HealthLabel.FontFace = Fonts.ProggyTiny -- Use the custom registered font
    GUI.HealthLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    GUI.HealthLabel.BackgroundTransparency = 1
    GUI.HealthLabel.Size = UDim2.new(0, 100, 0, 20)  -- Smaller size for concise display
    GUI.HealthLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    GUI.HealthLabel.Position = UDim2.new(0.32, 0, 0.45, 0)  -- Moved slightly more to the right

    -- Add TextLabel to display armor (moved slightly more to the right)
    GUI.ArmorLabel = Instance.new("TextLabel", GUI.MainFrame)
    GUI.ArmorLabel.BorderSizePixel = 0
    GUI.ArmorLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    GUI.ArmorLabel.TextSize = 14
    GUI.ArmorLabel.FontFace = Fonts.ProggyTiny -- Use the custom registered font
    GUI.ArmorLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    GUI.ArmorLabel.BackgroundTransparency = 1
    GUI.ArmorLabel.Size = UDim2.new(0, 100, 0, 20)  -- Smaller size for concise display
    GUI.ArmorLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
    GUI.ArmorLabel.Text = "0 Armor"  -- Default value, will be updated dynamically
    GUI.ArmorLabel.Position = UDim2.new(0.59, 0, 0.45, 0)  -- Moved slightly more to the right
end

-- Function to update GUI with the closest player's information
local function updateTargetGUI()
    if not targetGUIEnabled then
        GUI.MainFrame.Visible = false
        return
    end

    if Target and Target.Character then
        local humanoid = Target.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            GUI.UsernameLabel.Text = truncateText(Target.Name, maxUsernameLength)
            GUI.Headshot.Image = "rbxthumb://type=AvatarHeadShot&id=" .. Target.UserId .. "&w=420&h=420"
            GUI.HealthLabel.Text = math.floor(humanoid.Health) .. " Health"

            -- Update the health bar size based on the player's current health
            local healthPercentage = humanoid.Health / humanoid.MaxHealth
            GUI.HealthBar.Size = UDim2.new(healthPercentage, 0, 1, 0)  -- Adjust width based on health percentage

            -- Fetch armor value dynamically
            local armorValue = 0
            local armor = workspace:FindFirstChild("Players") and workspace.Players:FindFirstChild(Target.Name) and workspace.Players[Target.Name]:FindFirstChild("BodyEffects") and workspace.Players[Target.Name].BodyEffects:FindFirstChild("Armor")
            if armor then
                armorValue = armor.Value
            end
            GUI.ArmorLabel.Text = armorValue .. " Armor" -- Update ArmorLabel with dynamic value

            GUI.MainFrame.Visible = true
        else
            GUI.MainFrame.Visible = false
        end
    else
        GUI.MainFrame.Visible = false
    end
end

-- Toggle Target GUI visibility
local function toggleTargetGUI(state)
    targetGUIEnabled = state
    if not state then
        GUI.MainFrame.Visible = false
    end
end

-- Update Target GUI based on Target Aim every frame
RunService.Heartbeat:Connect(function()
    if isTargetAimEnabled then -- Check if target aim is enabled
        Target = Plr -- Update Target from your aiming logic
    end
    updateTargetGUI()
end)

-- Create GUI and Initialize
createTargetGUI()

-- Toggle GUI using your existing menu structure or a keybind
Target_Strafe:addToggle({
    text = "Target GUI Enabled",
    default = false,
    flag = "TargetGUIEnabled",
    callback = function(state)
        toggleTargetGUI(state)
    end
})

   

local tracerLine = Drawing.new("Line")
local tracerStroke = Drawing.new("Line")  -- Create a new line for the stroke
tracerLine.Visible = false
tracerStroke.Visible = false  -- Start with both lines being invisible

tracerLine.Color = Color3.fromRGB(255, 0, 0)  -- Default color for the tracer line
tracerLine.Thickness = 2  -- Line thickness

tracerStroke.Color = Color3.fromRGB(0, 0, 0)  -- Stroke color is black
tracerStroke.Thickness = 1 -- Make stroke line slightly thicker to simulate a stroke

-- Function to toggle tracer line and stroke
local function toggleTracerLine(state)
    tracerLine.Visible = state
    tracerStroke.Visible = state
end

-- Function to update tracer line and stroke position
local function updateTracerLine()
    if enabled and dotEnabled and tracerLine.Visible and Plr and Plr.Character and Plr.Character:FindFirstChild("HumanoidRootPart") then
        local predictedPosition

        if ResolverEnabled then
            -- Use the predicted position if Resolver is enabled
            predictedPosition = Plr.Character.HumanoidRootPart.Position + (ResolverVelocity * 0.1) -- Adjust prediction factor as needed
        else
            -- Use the current position if Resolver is not enabled
            predictedPosition = Plr.Character.HumanoidRootPart.Position
        end

        local dotPosition = CC:WorldToViewportPoint(predictedPosition)

        -- Update tracer to follow the dot to the mouse
        tracerLine.From = Vector2.new(dotPosition.X, dotPosition.Y)
        tracerStroke.From = tracerLine.From  -- Stroke follows the tracer line

        -- Correct the 'To' position with an offset, if needed
        local mousePosition = Vector2.new(mouse.X, mouse.Y)
        local offset = Vector2.new(0, 36) -- Adjust the vertical offset if needed
        tracerLine.To = mousePosition + offset
        tracerStroke.To = tracerLine.To  -- Stroke follows the tracer line
    else
        tracerLine.Visible = false
        tracerStroke.Visible = false
    end
end

-- Add toggle for tracer line in your Target Aim settings
Combat_Targetaim:addToggle({
    text = "Tracer Line Enabled",
    default = false,
    flag = "TracerLineEnabled",
    callback = function(state)
        toggleTracerLine(state)
    end
})

-- Update the tracer line position on each frame
game:GetService("RunService").RenderStepped:Connect(function()
    updateTracerLine()
end)

-- Example of updating the tracer line color if needed
Combat_Targetaim:addColorpicker({
    text = "Tracer Line Color",
    default = Color3.fromRGB(255, 0, 0),  -- Default color
    flag = "TracerLineColor",
    callback = function(color)
        tracerLine.Color = color
    end
})

-- Ensure to add clean-up function on exit
game:BindToClose(function()
    tracerLine:Remove()
    tracerStroke:Remove()  -- Clean up the stroke line as well
end)



-- Refresh Configs and Notify
Library:refreshConfigs()

-- honestly, i want to use less -- in my messages to avoid higher mpbs.
